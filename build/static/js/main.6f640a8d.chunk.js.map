{"version":3,"sources":["assets/1.png","pages/home.js","pages/WinScreen.js","pages/loseScreen.js","pages/Spinner.js","components/slider/Handle.jsx","components/slider/Track.jsx","components/slider/styles.js","utils/players.js","utils/cards.js","utils/bet.js","utils/ui.js","components/cards/Card.jsx","components/cards/HiddenCard.jsx","components/players/PlayerStatusNotificationBox.jsx","components/players/Player.jsx","components/players/ShowdownPlayer.jsx","utils/ai.js","pages/playmode.js","pages/prewin.js","pages/preplaymode.js","pages/index.js","router/index.js","App.js","index.js","assets/logo.png"],"names":["module","exports","__webpack_require__","p","myContract","ethers","Contract","Abi","Home","props","setAvailable","setPreAvailable","_useState","useState","_useState2","Object","slicedToArray","chipCount","setChipCount","_useState3","_useState4","walletAddress","setWalletAddress","_useState5","_useState6","depositWait","setDepositWait","useEffect","getBalance","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","provider","accounts","signer","MyContract","balance","wrap","_context","prev","next","window","ethereum","providers","Web3Provider","listAccounts","sent","console","log","selectedAddress","getSigner","connect","balanceOf","toString","t0","stop","apply","this","arguments","handleDeposit","_ref2","_callee2","tx","_context2","transfer","catch","err","undefined","wait","react_default","createElement","className","src","logo","alt","width","onClick","enable","then","res","e","web3","alert","introLogo","WinScreen","Axios","post","amount","address","data","style","location","reload","Spinner","Handle","_ref$handle","handle","id","value","percent","getHandleProps","assign","left","concat","position","marginLeft","marginTop","zIndex","height","border","textAlign","cursor","borderRadius","backgroundColor","color","display","textShadow","justifyContent","fontFamily","fontSize","Track","source","target","getTrackProps","sliderStyle","railStyle","axios","require","generateTable","users","uuid","name","avatarURL","cards","showDownHand","hand","descendingSortHand","chips","roundStartChips","roundEndChips","currentRoundChipsInvested","bet","betReconciled","folded","allIn","canRaise","stackInvestment","robot","get","results","map","user","first","charAt","toUpperCase","slice","last","picture","large","forEach","push","abrupt","handleOverflowIndex","currentIndex","incrementBy","arrayLength","direction","Error","determinePhaseStartActivePlayer","state","recursion","length","activePlayerIndex","players","blindIndex","big","determineNextActivePlayer","activePlayer","allButOnePlayersAreAllIn","numPlayersActive","numPlayersAllIn","showDown","reconcilePot","dealMissingCommunityCards","handlePhaseShift","filterBrokePlayers","dealerID","filter","player","newDealerIndex","findIndex","dealerIndex","small","anteUpBlinds","bigBlindIndex","smallBlindIndex","minBet","objectSpread","numPlayersFolded","blindIndicies","determineBlindIndices","dealPrivateCards","beginNextRound","communityCards","sidePots","playerHierarchy","showDownMessages","deck","shuffle","generateDeckOfCards","highBet","betInputValue","clearPlayerCards","card","passDealerChip","nextDealer","checkWin","suits","VALUE_MAP","2","3","4","5","6","7","8","9","10","J","Q","K","A","randomizePosition","min","max","Math","ceil","floor","random","_step","_iterator","_createForOfIteratorHelper","s","n","done","_step2","suit","_iterator2","cardFace","f","shuffledDeck","Array","filledSlots","i","lastSlot","el","shuffleToPosition","totalNumCards","includes","popCards","numToPop","chosenCards","mutableDeckCopy","toConsumableArray","pop","clearCards","animationDelay","_popCards","newDeck","phase","_step4","_iterator4","_loop","frequencyHistogram","suitHistogram","sort","b","valueSet","buildValueSet","_checkFlush","checkFlush","isFlush","flushedSuit","flushCards","isRoyalFlush","checkRoyalFlush","checkStraightFlush","isStraightFlush","isLowStraightFlush","concurrentSFCardValues","concurrentSFCardValuesLow","_checkStraight","checkStraight","isStraight","isLowStraight","concurrentCardValues","concurrentCardValuesLow","_analyzeHistogram","analyzeHistogram","isFourOfAKind","isFullHouse","isThreeOfAKind","isTwoPair","isPair","frequencyHistogramMetaData","isNoPair","bools","heldRankHierarchy","match","metaData","highRankPosition","bestHandRank","bestHand","buildBestHand","distributeSidePots","bestRank","reduce","acc","cur","index","reverse","mutableHand","cloneDeep","_loop2","indexOfQuad","quads","face","tripples","_loop3","indexOfTripple","_loop4","indexOfPair","_loop5","_loop6","pairs","_loop7","_loop8","_loop9","_loop10","buildAbsolutePlayerRankings","_step5","_iterator5","sidePot","rankMap","rankPlayerHands","contestants","battleRoyale","potValue","activePlayers","hierarchy","Map","playerIndex","_player$showDownHand","_step6","_iterator6","_loop11","handRank","_ref3","playersWhoHoldThisRank","formattedPlayersWhoHoldThisRank","_playersWhoHoldThisRa","sortedComparator","buildComparator","snapshot","winnerHierarchy","determineContestedHierarchy","loserHierarchy","processComparator","comparator","round","filterableComparator","frame","_processSnapshotFrame","processSnapshotFrame","winningFrame","losingFrame","lowerTierComparator","some","snapshotToMatchName","_winningFrame$","filteredWinnerSnapshots","_comparator$0$","processLowTierComparators","loserHierarchyFrame","loserComparatorToProcess","highValue","_step7","_iterator7","_loop12","contestant","prize","winnerFound","rank","payWinners","winners","determineWinner","pot","overflow","splitPot","winner","playerData","from","playerShowdownData","_loop13","losers","v","nameToExtract","_ret2","esm_typeof","flushMatchCards","_checkStraight2","numTripples","numPairs","numConcurrentCards","_checkLowStraight","checkLowStraight","valueSetCopy","sortedValueSetCopy","Set","cardInfo","cardsToPop","_step8","_popShowdownCards","popShowdownCards","_iterator8","numPlayers","blindIndices","determineMinBet","playerChipsStack","playerBet","playerTotalChips","handleBet","bet_createForOfIteratorHelper","subtractableChips","handleFold","_step3","_popCards2","_iterator3","dealFlop","_popCards3","dealTurn","_popCards4","dealRiver","sidePotStack","condenseSidePots","calculateSidePots","playerStacks","investedPlayers","playerToRefund","ascBetPlayers","smallStackValue","builtSidePot","arrayIdentical","arr1","arr2","bool","renderActionButtonText","renderNetPlayerEarnings","endChips","startChips","netChipEarnings","win","none","class","renderShowdownMessages","message","Fragment","key","renderActionMenu","changeSliderInputFn","es","rootStyle","domain","values","step","onChange","mode","getRailProps","handles","slider_Handle","right","tracks","_ref4","slider_Track","Card","_props$cardData","cardData","applyFoldedClassname","renderUnicodeSuitSymbol","HiddenCard","PlayerStatusNotificationBox","isActive","content","endTransition","CSSTransition","in","timeout","appear","enter","exit","classNames","onEntered","Player","playerBoxIndex","arrayIndex","playerAnimationSwitchboard","hasDealerChip","_props$player","players_PlayerStatusNotificationBox","isAnimating","cards_HiddenCard","cards_Card","ShowdownPlayer","renderCards","handleAI","pushAnimationState","investmentRequiredToRemain","_generateHistogram","generateHistogram","stakes","classifyStakes","preFlopValues","highCard","lowCard","suited","entries","find","keyValuePair","_buildPreFlopDetermin","buildPreFlopDeterminant","callLimit","raiseChance","raiseRange","willCall","BET_HIERARCHY","callValue","willRaise","determinedRaiseRange","betValue","decideBetProportion","handHierarchy","highRank","_buildGeneralizedDete","buildGeneralizedDeterminant","raiseChange","straightGap","percentage","blind","insignificant","lowdraw","meddraw","hidraw","strong","major","aggro","beware","chance","PlayMode","loading","loser","playActionMessages","0","1","cardAnimationDelay","loadTable","handleAvailable","_this","setState","available","handleBetInputChange","val","parseInt","changeSliderInput","newAnimationSwitchboard","defineProperty","popAnimationState","persistContent","handleBetInputSubmit","_this$state","appState","objectWithoutProperties","newState","setTimeout","_this$state2","_this$state3","handleAIUtil","renderBoard","_this$state4","result","unshift","players_Player","component","renderCommunityCards","purgeAnimation","runGameLoop","renderRankTie","rankSnapshot","renderRankWinner","playerStateData","statePlayer","players_ShowdownPlayer","alignItems","renderBestHands","isArray","handleNextRound","renderActionButtons","_this$state5","renderShowdown","renderGame","_this$state6","playersBoughtIn","imageLoaderRequest","XMLHttpRequest","addEventListener","type","_this2","open","send","prevState","pages_Spinner","pages_WinScreen","loseScreen","Component","prewin","Index","preAvailable","playmode","preplaymode","home","routes","react_router_dom","react_router","exact","path","App","flag","setFlag","setOpen","alertUser","removeEventListener","preventDefault","returnValue","_func","chainId","on","request","method","func","Transition","React","forwardRef","ref","Slide","Dialog","TransitionComponent","keepMounted","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","router","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6f640a8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.869a11f8.png\";","import React, {useState, useEffect} from 'react';\r\nimport logo from '../assets/logo.png';\r\nimport introLogo from '../assets/1.png';\r\nimport { ethers } from 'ethers';\r\nimport Abi from '../contract/abi.json';\r\n\r\nvar tokenAddress = \"0xb140665dde25c644c6b418e417c930de8a8a6ac9\";\r\nvar myContract = new ethers.Contract(tokenAddress, Abi);\r\nvar adminAddress = \"0xf85002E99c20b3c7DC3e6B0B5203292Dcd349421\";\r\n\r\nconst Home = props => {\r\n\tconst {setAvailable, setPreAvailable} = props;\r\n\tconst [chipCount, setChipCount] = useState(0);\r\n\tconst [walletAddress, setWalletAddress] = useState(null);\r\n\tconst [depositWait, setDepositWait] = useState(false);\r\n\r\n\tuseEffect(()=>{\r\n\t\tgetBalance();\r\n\t  },[])\r\n\r\n\tconst getBalance = async () =>{\r\n\t\tif(window.ethereum){\r\n\t\t  try{\r\n\t\t\tvar provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\t\t  const accounts = await provider.listAccounts();\r\n\t\t  console.log(accounts)\r\n\t\t  setWalletAddress(window.ethereum.selectedAddress);\r\n\t\t  const signer = provider.getSigner();\r\n\t\t  var MyContract = myContract.connect(signer);\r\n\t\t  console.log(MyContract);\r\n\t\t  let balance = await MyContract.balanceOf(window.ethereum.selectedAddress);\r\n\t\t  console.log(balance.toString());\r\n\t\t  setChipCount(balance.toString())\r\n\t\t  }\r\n\t\t  catch(err){\r\n\t\t\tconsole.log(err)\r\n\t\t  }\r\n\t\t}\r\n\t  }\r\n\r\n\tconst handleConnect = () =>{\r\n \r\n\t\tif (window.ethereum) {\r\n\t\t  try {\r\n\t\t\twindow.ethereum.enable().then((res)=> {\r\n\t\t\t  console.log(\"public key is \", window.ethereum.selectedAddress);\r\n\t\t\t  setWalletAddress(window.ethereum.selectedAddress);\r\n\t\t\t  if(res){\r\n\t\t\t\tgetBalance();\r\n\t\t\t  }\r\n\t\t\t  // User has allowed account access to DApp...\r\n\t\t\t});\r\n\t\t  } catch (e) {\r\n\t\t\t// User has denied account access to DApp...\r\n\t\t  }\r\n\t\t}\r\n\t\t// Legacy DApp Browsers\r\n\t\telse if (window.web3) {\r\n\t\t  // web3 = new Web3(web3.currentProvider);\r\n\t\t  }\r\n\t\t// Non-DApp Browsers\r\n\t\telse {\r\n\t\t  alert(\"You have to install MetaMask !\");\r\n\t\t}\r\n\t}\r\n\r\n\tconst handlePrePlay = () =>{\r\n\t\tsetPreAvailable(true);\r\n\t}\r\n\r\n\tconst handleDeposit = async () =>{\r\n\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\t\tconst signer = provider.getSigner();\r\n\t\tvar MyContract = myContract.connect(signer);\r\n\t\tvar tx = await MyContract.transfer(adminAddress, 100)\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\t\tif(tx!=undefined){\r\n\t\t\tsetDepositWait(true);\r\n\t\t\tawait tx.wait();\r\n\t\t\tsetAvailable(true);\r\n\t\t}\r\n\t\t\t\r\n\t} \r\n\treturn(\r\n\t\t<div className=\"loading-container\">\r\n\t\t\t<div className='game-action-bar' >\r\n\t\t\t\t<div className = \"logo\">\r\n\t\t\t\t\t<img src = {logo} alt = \"logo\" width = \"30px\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"logo\">\r\n\t\t\t\t\t<button className = \"x-connect-button\" onClick = {handlePrePlay}>preplay</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"logo\">\r\n\t\t\t\t\t<button className = \"x-connect-button\" onClick = {handleConnect}>{walletAddress?chipCount:\"Connect\"}</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className = \"x-grid1\">\r\n\t\t\t\t\r\n\t\t\t\t<div className='spinner-container' >\r\n\t\t\t\t\t<img src={introLogo} alt=\"Loading...\"/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"x-font1 x-home-text-content\">\r\n\t\t\t\t\t{walletAddress?chipCount>=100?\"please deposit ATRI Token to enjoy!\":\"You need to deposit a minimum of 1000 ATRI \\n in your Metamask wallet to start the game!\":\"please connect metamask to play Atari Poker!\"}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"x-deposit-pending\">\r\n\t\t\t\t\t{depositWait?\"deposit progress is pending.   Please wait...\": null}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"x-home-text-content\">\r\n\t\t\t\t\t{/* {chipCount>=100&&!depositWait?\r\n\t\t\t\t\t\t<button className = \"x-connect-button\" onClick = {handleDeposit}>Deposit</button>\r\n\t\t\t\t\t\t:null\r\n\t\t\t\t\t} */}\r\n\t\t\t\t\t<button className = \"x-connect-button\" onClick = {handleDeposit}>Deposit</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Home;","import React, {useEffect} from 'react';\nimport Axios from 'axios';\n\nfunction WinScreen(){\n\n    useEffect(()=>{\n        if(window.ethereum){\n            console.log(\"good\")\n            Axios.post(\"/api/bet/set-win\",{amount:5000, address:window.ethereum.selectedAddress})\n            .then((res)=>{\n                console.log(res.data)\n            })\n        }\n    },[])\n\n    const handleReplay = () =>{\n        window.location.reload();\n    }\n\n    return(\n        <div>\n            <div className = \"x-winCup\">\n                <img src = \"/assets/winCup.png\" alt = \"winCup\" style = {{width: \"300px\"}} />\n            </div>\n            <div className = \"x-font2\">\n                Congratulations!\n            </div>\n            <div className = \"x-font1\">\n                You are Winner in this game!\n            </div>\n            <div className = \"x-replay\">\n                <button className = \"x-connect-button\" onClick = {handleReplay}>Replay</button>\n            </div>\n        </div>\n    )\n}\n\nexport default WinScreen;","import React, {useEffect} from 'react';\r\n\r\nfunction WinScreen(){\r\n\r\n    useEffect(()=>{\r\n\r\n    },[])\r\n\r\n    const handleReplay = () =>{\r\n        window.location.reload()\r\n    }\r\n\r\n    return(\r\n        <div className = \"x-loser-content\">\r\n            <div className = \"x-winCup\">\r\n                <img src = \"/assets/loseCup.jpg\" alt = \"winCup\" style = {{width: \"350px\"}} />\r\n            </div>\r\n            <div className = \"x-font2\">\r\n                Your Luck is bad for now!\r\n            </div>\r\n            <div className = \"x-font1\">\r\n                You are loser in this game!\r\n            </div>\r\n            <div className = \"x-replay\">\r\n                <button className = \"x-connect-button\" onClick = {handleReplay}>Let's try again!</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WinScreen;","import React from 'react';\n\nconst Spinner = props => {\n\treturn(\n\t\t<div className=\"x-spinner-container\">\n\t\t\t<div className='spinner-container' >\n\t\t\t\t<img src={'/assets/loading.png'} alt=\"Loading...\"/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Spinner;","import React from 'react';\n\nfunction Handle({\n  handle: { id, value, percent },\n  getHandleProps\n}) {\n  return (\n    <div\n      style={{\n        left: `${percent}%`,\n        position: 'absolute',\n        marginLeft: -4,\n        marginTop: 31,\n        zIndex: 2,\n        width: 15,\n        height: 15,\n        border: 0,\n        textAlign: 'center',\n        cursor: 'pointer',\n        borderRadius: '50%',\n        backgroundColor: '#e31b21',\n        color: '#aaa',\n      }}\n      {...getHandleProps(id)}\n    >\n      <div style={{ display: 'flex', textShadow: '2px 2px 8px rgba(0,0,0,0.95)', justifyContent: 'center', fontFamily: 'Roboto', fontSize: 10, marginTop: 30}} >\n        {value}\n      </div>\n    </div>\n\n  )\n}\n\nexport default Handle;","import React from 'react';\n\nfunction Track ({ source, target, getTrackProps }) {\n  return(\n    <div\n    style={{\n        position: 'absolute',\n        height: 7,\n        zIndex: 1,\n        marginTop: 35,\n        backgroundColor: '#e31b21',\n        borderRadius: 5,\n        cursor: 'pointer',\n        left: `${source.percent}%`,\n        width: `${target.percent - source.percent}%`,\n    }}\n    {...getTrackProps()}\n    />\n  )\n}\n  \nexport default Track;","const sliderStyle = {\n  position: 'relative',\n  width: '100%',\n  height: 80,\n}\n  \nconst railStyle = {\n  position: 'absolute',\n  width: '100%',\n  height: 5,\n  marginTop: 35,\n  borderRadius: 5,\n  backgroundColor: '#2a2a2a',\n}\n\nexport { sliderStyle, railStyle }","import uuid from 'uuid/v1';\nimport { handlePhaseShift, reconcilePot, anteUpBlinds, determineBlindIndices } from './bet.js';\nimport { dealMissingCommunityCards, showDown, generateDeckOfCards, shuffle, dealPrivateCards } from './cards.js';\n\nconst axios = require('axios')\n// TODO Generate UUID to simulate User ID and really get a perf match on binding to players when determining winnings\nconst generateTable = async () => {\n\tconst users = [{\n\t\tid: uuid(),\n\t\tname: 'Player 1',\n\t\tavatarURL: '/assets/boy.svg',\n\t\tcards: [],\n\t\tshowDownHand: {\n\t\t\thand: [],\n\t\t\tdescendingSortHand: [], \n\t\t},\n\t\tchips: 1000,\n\t\troundStartChips: 1000,\n\t\troundEndChips: 1000,\n\t\tcurrentRoundChipsInvested: 0,\n\t\tbet: 0,\n\t\tbetReconciled: false,\n\t\tfolded: false,\n\t\tallIn: false,\n\t\tcanRaise: true,\n\t\tstackInvestment: 0,\n\t\trobot: false\n\t}];\n\n\tconst response = await axios.get(`https://randomuser.me/api/?results=4&nat=us,gb,fr`);\n\tresponse.data.results\n\t\t.map(user => {\n\t\t\tconst randomizedChips = 1000;\n\t\t\treturn ({\n\t\t\t\tid: uuid(),\n\t\t\t\tname: `${user.name.first.charAt(0).toUpperCase()}${user.name.first.slice(1)} ${user.name.last.charAt(0).toUpperCase()}${user.name.last.slice(1)}`,\n\t\t\t\tavatarURL: user.picture.large,\n\t\t\t\tcards: [],\n\t\t\t\tchips: randomizedChips,\n\t\t\t\troundStartChips: randomizedChips,\n\t\t\t\troundEndChips: randomizedChips,\n\t\t\t\tcurrentRoundChipsInvested: 0,\n\t\t\t\tshowDownHand: {\n\t\t\t\t\thand: [],\n\t\t\t\t\tdescendingSortHand: [],\n\t\t\t\t},\n\t\t\t\tbet: 0,\n\t\t\t\tbetReconciled: false,\n\t\t\t\tfolded: false,\n\t\t\t\tallIn: false,\n\t\t\t\trobot: true,\n\t\t\t\tcanRaise: true,\n\t\t\t\tstackInvestment: 0,\n\t\t\t})\n\t\t})\n\t\t.forEach(user => users.push(user))\n\n\treturn users\n}\n\nconst generatePersonality = (seed) => {\n\tswitch(seed) {\n\t\tcase (seed > 0.5): \n\t\t\treturn 'standard'\n\t\tcase (seed > 0.35): \n\t\t\treturn 'aggressive'\n\t\tcase (seed > 0):\n\t\tdefault: \n\t\t\treturn 'conservative'\n\t}\n}\n\nconst handleOverflowIndex = (currentIndex, incrementBy, arrayLength, direction) => {\n\tswitch (direction) {\n\t\tcase('up'): {\n\t\t\treturn (\n\t\t\t\t(currentIndex + incrementBy) % arrayLength\n\t\t\t)\n\t\t}\n\t\tcase('down'): {\n\t\t\treturn (\n\t\t\t\t((currentIndex - incrementBy) % arrayLength) + arrayLength \n\t\t\t)\n\t\t}\n\t\tdefault: throw Error(\"Attempted to overfow index on unfamiliar direction\");\n\t}\n}\n\nconst determinePhaseStartActivePlayer = (state, recursion = false) => {\n\tif (!recursion) {\n\t\tstate.activePlayerIndex = handleOverflowIndex(state.blindIndex.big, 1, state.players.length, 'up');\n\t} else if (recursion) {\n\t\tstate.activePlayerIndex = handleOverflowIndex(state.activePlayerIndex, 1, state.players.length, 'up');\n\t}\n\t\tif (state.players[state.activePlayerIndex].folded) {\n\t\t\treturn determinePhaseStartActivePlayer(state, true)\n\t\t}\n\t\tif (state.players[state.activePlayerIndex].chips === 0) {\n\t\t\treturn determinePhaseStartActivePlayer(state, true)\n\t\t}\n\t\t\t\treturn state\n}\n\n\n// This function can lead to errors if player all ins at a certain position\n// final AI will freeze\n// seems to happen when only 2 players left and someone has all-in\n\nconst determineNextActivePlayer = (state) => {\n\tstate.activePlayerIndex = handleOverflowIndex(state.activePlayerIndex, 1, state.players.length, 'up');\n\tconst activePlayer = state.players[state.activePlayerIndex];\n\n\tconst allButOnePlayersAreAllIn = (state.numPlayersActive - state.numPlayersAllIn === 1);\n\tif (state.numPlayersActive ===  1) {\n\t\tconsole.log(\"Only one player active, skipping to showdown.\")\n\t\treturn(showDown(reconcilePot(dealMissingCommunityCards(state))));\n\t}\n\tif (activePlayer.folded) {\n\t\tconsole.log(\"Current player index is folded, going to next active player.\")\n\t\treturn determineNextActivePlayer(state);\n\t}\n\n\tif (\n\t\tallButOnePlayersAreAllIn &&\n\t\t!activePlayer.folded &&\n\t\tactivePlayer.betReconciled\n\t) {\n\t\treturn(showDown(reconcilePot(dealMissingCommunityCards(state))));\n\t}\n\n\tif (activePlayer.chips === 0) {\n\t\tif (state.numPlayersAllIn === state.numPlayersActive) {\n\t\t\tconsole.log(\"All players are all in.\")\n\t\t\treturn(showDown(reconcilePot(dealMissingCommunityCards(state))));\n\t\t} else if (allButOnePlayersAreAllIn && activePlayer.allIn) {\n\t\t\treturn(showDown(reconcilePot(dealMissingCommunityCards(state))));\n\t\t} else {\n\t\t\treturn determineNextActivePlayer(state);\n\t\t}\n\t}\n\n\t// IF a player is all in, he will be reconciled?\n\tif (activePlayer.betReconciled) {\n\t\treturn handlePhaseShift(state);\n\t}\n\n\treturn state\n}\n\n\nconst passDealerChip = (state) => {\n\t// This is messy because we are determining active player, dealer, and blinds based on an arbitrary index, not with flags on player entries.\n\t// When we remove all players who have ran out of chips, the new indices will not match up cleanly. We need to find the index of the player, keep track of who it is or \n\tstate.dealerIndex = handleOverflowIndex(state.dealerIndex, 1, state.players.length, 'up');\n\tconst nextDealer = state.players[state.dealerIndex]\n\tif (nextDealer.chips === 0) {\n\t\treturn passDealerChip(state)\n\t}\n\n\t\treturn filterBrokePlayers(state, nextDealer.name);\n}\n\n\n/* !!!!\n Action is initiated on the first betting round by the first player to the left of the blinds. On all subsequent betting rounds, the action begins with the first active player to the left of the button.\n */\nconst filterBrokePlayers = (state, dealerID) => {\n\tstate.players = state.players.filter(player => player.chips > 0);\n\tconst newDealerIndex = state.players.findIndex(player => player.name === dealerID)\n\tstate.dealerIndex = newDealerIndex\n\tstate.activePlayerIndex = newDealerIndex // This is incorrect, action should proceed to the left of the blinds -- if there are only 2 people...will it be the small blind? If there are 3, is it the dealer? Action is initiated on the first betting round by the first player to the left of the blinds. On all subsequent betting rounds, the action begins with the first active player to the left of the button.)))) This means THIS FUNCTION WILL CHANGE depending on the ACTIVE PHASE....\n\tif (state.players.length === 1) {\n\t\t// Victory!\n\t\treturn state\n\t} else if (state.players.length === 2) {\n\t\t// Need to refine rules for who goes first when 2 players are left\n\t\t// Can move this logic to our determineBlindIndices fn\n\t\tstate.blindIndex.small = newDealerIndex;\n\t\tstate.blindIndex.big = handleOverflowIndex(newDealerIndex, 1, state.players.length, 'up');\n\t\tstate.players = anteUpBlinds(state.players, { bigBlindIndex: state.blindIndex.big, smallBlindIndex: state.blindIndex.small }, state.minBet).map(player => ({\n\t\t\t...player,\n\t\t\tcards:[],\n\t\t\tshowDownHand: {\n\t\t\t\thand: [],\n\t\t\t\tdescendingSortHand: [],\n\t\t\t},\n\t\t\troundStartChips: player.chips + player.bet,\n\t\t\tcurrentRoundChipsInvested: 0,\n\t\t\tbetReconciled: false,\n\t\t\tfolded: false,\n\t\t\tallIn: false,\n\t\t}))\n\t\tstate.numPlayersAllIn = 0;\n\t\tstate.numPlayersFolded = 0;\n\t\tstate.numPlayersActive = state.players.length;\n\t} else {\n\t\tconst blindIndicies = determineBlindIndices(newDealerIndex, state.players.length);\n\t\tstate.blindIndex = {\n        \tbig: blindIndicies.bigBlindIndex,\n        \tsmall: blindIndicies.smallBlindIndex,\n      \t}\n\t\tstate.players = anteUpBlinds(state.players, blindIndicies, state.minBet).map(player => ({\n\t\t\t...player,\n\t\t\tcards: [],\n\t\t\tshowDownHand: {\n\t\t\t\thand: [],\n\t\t\t\tdescendingSortHand: [],\n\t\t\t},\n\t\t\troundStartChips: player.chips + player.bet,\n\t\t\tcurrentRoundChipsInvested: 0,\n\t\t\tbetReconciled: false,\n\t\t\tfolded: false,\n\t\t\tallIn: false,\n\t\t}))\n\t\tstate.numPlayersAllIn = 0; // May need to alter this is big/small blind brings a player all in\n\t\tstate.numPlayersFolded = 0;\n\t\tstate.numPlayersActive = state.players.length;\n\t}\n\t\treturn dealPrivateCards(state)\n}\n\nconst beginNextRound = (state) => {\n\tstate.communityCards = [];\n\tstate.sidePots = [];\n\tstate.playerHierarchy = [];\n\tstate.showDownMessages = [];\n\tstate.deck = shuffle(generateDeckOfCards())\n\tstate.highBet = 20;\n\tstate.betInputValue = 20;\n\tstate.minBet = 20; // can export out to initialState\n\t// Unmount all cards so react can re-trigger animations\n\tconst { players } = state;\n\tconst clearPlayerCards = players.map(player => ({...player, cards: player.cards.map(card => {})}))\n\tstate.players = clearPlayerCards;\n\treturn passDealerChip(state)\n}\n\nconst checkWin = players => {\n\tconsole.log(players);\n\tif(players.filter(player => player.robot == false).length === 0)\n\t\treturn \"lose\";\n\telse if(players.filter(player => player.robot == true).length === 0)\n\t\treturn \"win\";\n\telse\n\t\treturn false;\n\n}\n\n// NEED INITIAL PLAYER STATE\n// INITIAL TABLE STATE\nexport { generateTable, handleOverflowIndex, determineNextActivePlayer, determinePhaseStartActivePlayer, beginNextRound, checkWin }","import { cloneDeep } from 'lodash';\nimport { handleOverflowIndex, determinePhaseStartActivePlayer } from './players.js';\n\nconst totalNumCards = 52;\nconst suits = ['Heart', 'Spade', 'Club', 'Diamond'];\nconst cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\nconst VALUE_MAP = {\n\t2:1,\n\t3:2,\n\t4:3,\n\t5:4,\n\t6:5,\n\t7:6,\n\t8:7,\n\t9:8,\n\t10:9,\n\tJ:10,\n\tQ:11,\n\tK:12,\n\tA:13,\n};\n\nconst randomizePosition = (min, max) => {\n\tmin = Math.ceil(min);\n  \tmax = Math.floor(max);\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nconst generateDeckOfCards = () => {\n\tconst deck = [];\n\n\tfor (let suit of suits) {\n\t\tfor (let card of cards) {\n\t\t\tdeck.push({\n\t\t\t\tcardFace: card,\n\t\t\t\tsuit: suit,\n\t\t\t\tvalue: VALUE_MAP[card]\n\t\t\t})\n\t\t}\n\t}\n\t\treturn deck\n}\n\nconst shuffle = (deck) => {\n\tlet shuffledDeck = new Array(totalNumCards);\n\tlet filledSlots = [];\n\tfor (let i = 0; i < totalNumCards; i++) {\n\t\tif (i === 51) {\n\t\t\t// Fill last undefined slot when only 1 card left to shuffle\n\t\t\tconst lastSlot = shuffledDeck.findIndex((el) => typeof el == 'undefined');\n\t\t\t\tshuffledDeck[lastSlot] = deck[i];\n\t\t\t\tfilledSlots.push(lastSlot);\n\t\t} else {\n\t\t\tlet shuffleToPosition = randomizePosition(0, totalNumCards - 1);\n\t\t\t\twhile (filledSlots.includes(shuffleToPosition)) {\n\t\t\t\t\tshuffleToPosition = randomizePosition(0, totalNumCards - 1);\n\t\t\t\t}\n\t\t\t\t\t\tshuffledDeck[shuffleToPosition] = deck[i];\n\t\t\t\t\t\tfilledSlots.push(shuffleToPosition);\n\t\t}\n\t}\n\treturn shuffledDeck\n}\n\nconst popCards = (deck, numToPop) => {\n\t// Note: While this is a Shallow Copy, (It copies the references to the children) - note that we are mutating it by \n\t// Actually modifying the array, NOT the children. This is why the length of mutableCopy changes, but that of deck \n\t// Does not.\n\tconst mutableDeckCopy = [...deck];\n\tlet chosenCards;\n\tif (numToPop === 1) {\n\t\tchosenCards = mutableDeckCopy.pop();\n\t} else {\n\t\tchosenCards = [];\n\t\tfor(let i = 0; i < numToPop; i++) {\n\t\t\tchosenCards.push(mutableDeckCopy.pop());\n\t\t}\n\t}\n\t\treturn { mutableDeckCopy, chosenCards }\n}\n\nconst popShowdownCards = (deck, numToPop) => {\n\t// When dealMissingCommunityCards was calling popCards() with the condition numToPop === 1\n\t// It was returning a raw object instead of an array, and calling a for...of loop, causing the program to crash\n\t// Until we can refactor this code and all of its calling functions \n\t// (change the code for dealFlop/River/Turn to use a consistent .concat function instead of .push())\n\t// We'll just duplicat this code here and utilize it in dealMissingCommunityCards\n\tconst mutableDeckCopy = [...deck];\n\tlet chosenCards;\n\tif (numToPop === 1) {\n\t\tchosenCards = [mutableDeckCopy.pop()];\n\t} else {\n\t\tchosenCards = [];\n\t\tfor(let i = 0; i < numToPop; i++) {\n\t\t\tchosenCards.push(mutableDeckCopy.pop());\n\t\t}\n\t}\n\t\treturn { mutableDeckCopy, chosenCards }\n}\n\nconst dealPrivateCards = (state) => {\n\tstate.clearCards = false;\n\tlet animationDelay = 0;\n\twhile (state.players[state.activePlayerIndex].cards.length < 2) {\n\t\tconst { mutableDeckCopy, chosenCards } = popCards(state.deck, 1);\n\t\t\n\t\t// Can export to a separate function - as it will be used in many places\n\t\tchosenCards.animationDelay = animationDelay;\n\t\tanimationDelay = animationDelay + 250;\n\n\t\tconst newDeck = [...mutableDeckCopy];\n\t\tstate.players[state.activePlayerIndex].cards.push(chosenCards);\n\n\t\tstate.deck = newDeck;\n\t\tstate.activePlayerIndex = handleOverflowIndex(state.activePlayerIndex, 1, state.players.length, 'up');\n\t}\n\tif (state.players[state.activePlayerIndex].cards.length === 2) {\n\t\tstate.activePlayerIndex = handleOverflowIndex(state.blindIndex.big, 1, state.players.length, 'up');\n\t\tstate.phase = 'betting1';\n\t\t\treturn state;\n\t} \n}\n\nconst dealFlop = (state) => {\n\tlet animationDelay = 0;\n\tconst { mutableDeckCopy, chosenCards } = popCards(state.deck, 3);\n\t\t\n\t\tfor (let card of chosenCards) {\n\t\t\tcard.animationDelay = animationDelay;\n\t\t\tanimationDelay = animationDelay + 250;\n\t\t\tstate.communityCards.push(card);\n\t\t}\n\n\t\tstate.deck = mutableDeckCopy;\n\t\tstate = determinePhaseStartActivePlayer(state)\n\t\tstate.phase = 'betting2';\n\t\t\t\n\t\treturn state;\n}\n\nconst dealTurn = (state) => {\n\tconst { mutableDeckCopy, chosenCards } = popCards(state.deck, 1);\n\tchosenCards.animationDelay = 0;\n\t\t\n\tstate.communityCards.push(chosenCards);\n\tstate.deck = mutableDeckCopy;\n\tstate = determinePhaseStartActivePlayer(state)\n\tstate.phase = 'betting3'\n\n\t\treturn state\n}\n\nconst dealRiver = (state) => {\n\tconst { mutableDeckCopy, chosenCards } = popCards(state.deck, 1);\n\tchosenCards.animationDelay = 0;\n\t\t\n\t\tstate.communityCards.push(chosenCards);\n\t\tstate.deck = mutableDeckCopy;\n\t\tstate = determinePhaseStartActivePlayer(state)\n\t\tstate.phase = 'betting4'\n\n\t\t\treturn state\n}\n\nconst showDown = (state) => {\n\tfor (let player of state.players) {\n\t\tconst frequencyHistogram = {};\n\t\tconst suitHistogram = {};\n\n\t\tplayer.showDownHand.hand = player.cards.concat(state.communityCards);\n\t\tplayer.showDownHand.descendingSortHand = player.showDownHand.hand.map(el => el).sort((a,b) => b.value - a.value); // This mutates showDownHand.hand in place(!!)\n\n\t\tplayer.showDownHand.descendingSortHand.forEach(card => {\n\t\t\tfrequencyHistogram[card.cardFace] = (frequencyHistogram[card.cardFace] + 1 || 1);\n\t\t\tsuitHistogram[card.suit] = (suitHistogram[card.suit] + 1 || 1);\n\t\t})\n\n\t\t// For Debugging\n\t\tplayer.frequencyHistogram = frequencyHistogram;\n\t\tplayer.suitHistogram = suitHistogram;\n\n\t\tconst valueSet = buildValueSet(player.showDownHand.descendingSortHand);\n\n\t\tconst { isFlush, flushedSuit } = checkFlush(suitHistogram);\n\t\tconst flushCards = (isFlush) && player.showDownHand.descendingSortHand.filter(card => card.suit === flushedSuit);\n\t\tconst isRoyalFlush = (isFlush) && checkRoyalFlush(flushCards);\n\t\tconst { isStraightFlush, isLowStraightFlush, concurrentSFCardValues, concurrentSFCardValuesLow } = (isFlush) && checkStraightFlush(flushCards)\n\t\tconst { isStraight, isLowStraight, concurrentCardValues, concurrentCardValuesLow } = checkStraight(valueSet);\n\t\tconst { isFourOfAKind, isFullHouse, isThreeOfAKind, isTwoPair, isPair, frequencyHistogramMetaData } = analyzeHistogram(player.showDownHand.descendingSortHand, frequencyHistogram);\n\t\tconst isNoPair = ((!isRoyalFlush) && (!isStraightFlush) && (!isFourOfAKind) && (!isFullHouse) && (!isFlush) && (!isStraight) && (!isThreeOfAKind) && (!isTwoPair) && (!isPair))\n\t\t\n\t\t// For debugging/organization purposes, can probably be eliminated\n\t\tplayer.showDownHand.bools = {\n\t\t\tisRoyalFlush,\n\t\t\tisStraightFlush,\n\t\t\tisFourOfAKind,\n\t\t\tisFullHouse,\n\t\t\tisFlush,\n\t\t\tisStraight,\n\t\t\tisThreeOfAKind,\n\t\t\tisTwoPair,\n\t\t\tisPair,\n\t\t\tisNoPair,\n\t\t}\n\n\t\tplayer.showDownHand.heldRankHierarchy = [{\n\t\t\tname: 'Royal Flush',\n\t\t\tmatch: isRoyalFlush,\n\t\t}, {\n\t\t\tname: 'Straight Flush',\n\t\t\tmatch: isStraightFlush\n\t\t}, {\n\t\t\tname: 'Four Of A Kind',\n\t\t\tmatch: isFourOfAKind,\n\t\t}, {\n\t\t\tname: 'Full House',\n\t\t\tmatch: isFullHouse,\n\t\t}, {\n\t\t\tname: 'Flush',\n\t\t\tmatch: isFlush,\n\t\t}, {\n\t\t\tname: 'Straight',\n\t\t\tmatch: isStraight,\n\t\t}, {\n\t\t\tname: 'Three Of A Kind',\n\t\t\tmatch: isThreeOfAKind,\n\t\t}, {\n\t\t\tname: 'Two Pair',\n\t\t\tmatch: isTwoPair,\n\t\t}, {\n\t\t\tname: 'Pair',\n\t\t\tmatch: isPair,\n\t\t}, {\n\t\t\tname: 'No Pair',\n\t\t\tmatch: isNoPair\n\t\t}];\n\n\t\tplayer.metaData = frequencyHistogramMetaData\n\n\t\tconst highRankPosition = player.showDownHand.heldRankHierarchy.findIndex(el => el.match === true);\n\t\tplayer.showDownHand.bestHandRank = player.showDownHand.heldRankHierarchy[highRankPosition].name;\n\t\tplayer.showDownHand.bestHand = buildBestHand(player.showDownHand.descendingSortHand, player.showDownHand.bestHandRank, flushedSuit, flushCards, concurrentCardValues, concurrentCardValuesLow, isLowStraight, isLowStraightFlush, concurrentSFCardValues, concurrentSFCardValuesLow, frequencyHistogramMetaData)\n\n\t}\n\t\t\n\t\t/* \n\t\t\tRank Table (obj - MAP)\n\t\t\tHands as Keys\n\t\t\tArrays hold Player ID/Name\n\t\t\tGo down forEach\n\t\t\tWhen we find a contains - \n\n\t\t*/\n\n\t\t return distributeSidePots(state)\n\n}\n\nconst buildBestHand = (hand, bestRank, flushedSuit, flushCards, concurrentCardValues, concurrentCardValuesLow, isLowStraight, isLowStraightFlush, concurrentSFCardValues, concurrentSFCardValuesLow, frequencyHistogramMetaData) => {\n\t// TODO: LOW STRAGHT, STRAIGHT FLUSH (++ LOW STRAIGHT FLUSH...)\n\tswitch(bestRank) {\n\t\tcase('Royal Flush'): {\n\t\t\treturn flushCards.slice(0, 5)\n\t\t}\n\t\tcase('Straight Flush'): {\n\t\t\tif (isLowStraightFlush && concurrentSFCardValues.length < 5) {\n\t\t\t\tconcurrentSFCardValuesLow[0] = 13\n\t\t\t\treturn concurrentSFCardValuesLow.reduce((acc, cur, index) => {\n\t\t\t\t\tif (index < 5) {\n\t\t\t\t\t\tacc.push(flushCards[flushCards.findIndex(match => match.value === cur)]);\n\t\t\t\t\t}\n\t\t\t\t\t\treturn acc;\n\t\t\t\t}, []).reverse();\n\t\t\t} else {\n\t\t\t\treturn concurrentSFCardValues.reduce((acc, cur, index) => {\n\t\t\t\t\tif (index < 5) {\n\t\t\t\t\t\tacc.push(flushCards[flushCards.findIndex(match => match.value === cur)]);\n\t\t\t\t\t}\n\t\t\t\t\t\treturn acc;\n\t\t\t\t}, []);\n\t\t\t}\n\t\t}\n\t\tcase('Four Of A Kind'): {\n\t\t\tconst bestHand = [];\n\t\t\tlet mutableHand = cloneDeep(hand);\n\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tconst indexOfQuad = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.quads[0].face);\n\t\t\t\tbestHand.push(mutableHand[indexOfQuad])\n\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfQuad)\n\t\t\t}\n\n\t\t\t\treturn bestHand.concat(mutableHand.slice(0, 1))\n\t\t}\n\t\tcase('Full House'): {\n\t\t\tconst bestHand = [];\n\t\t\tlet mutableHand = cloneDeep(hand);\n\t\t\tif (frequencyHistogramMetaData.tripples.length > 1) {\n\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\tconst indexOfTripple = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[0].face);\n\t\t\t\t\tbestHand.push(mutableHand[indexOfTripple])\n\t\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfTripple)\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < 2; i++) {\n\t\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[1].face);\n\t\t\t\t\tbestHand.push(mutableHand[indexOfPair])\n\t\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\n\t\t\t\t}\n\t\t\t\t\treturn bestHand\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\tconst indexOfTripple = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[0].face);\n\t\t\t\t\tbestHand.push(mutableHand[indexOfTripple])\n\t\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfTripple)\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < 2; i++) {\n\t\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.pairs[0].face);\n\t\t\t\t\tbestHand.push(mutableHand[indexOfPair])\n\t\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\n\t\t\t\t}\n\t\t\t\t\treturn bestHand\n\t\t\t}\n\t\t}\n\t\tcase('Flush'): {\n\t\t\treturn flushCards.slice(0, 5)\n\t\t}\n\t\tcase('Straight'): {\n\t\t\tif (isLowStraight && concurrentCardValues.length < 5) {\n\t\t\t\tconcurrentCardValuesLow[0] = 13\n\t\t\t\treturn concurrentCardValuesLow.reduce((acc, cur, index) => {\n\t\t\t\t\tif (index < 5) {\n\t\t\t\t\t\tacc.push(hand[hand.findIndex(match => match.value === cur)]);\n\t\t\t\t\t}\n\t\t\t\t\t\treturn acc;\n\t\t\t\t}, []).reverse();\n\t\t\t} else {\n\t\t\t\treturn concurrentCardValues.reduce((acc, cur, index) => {\n\t\t\t\t\tif (index < 5) {\n\t\t\t\t\t\tacc.push(hand[hand.findIndex(match => match.value === cur)]);\n\t\t\t\t\t}\n\t\t\t\t\t\treturn acc;\n\t\t\t\t}, []);\n\t\t\t}\n\t\t}\n\t\tcase('Three Of A Kind'): {\n\t\t\tconst bestHand = [];\n\t\t\tlet mutableHand = cloneDeep(hand);\n\n\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\tconst indexOfTripple = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.tripples[0].face);\n\t\t\t\tbestHand.push(mutableHand[indexOfTripple])\n\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfTripple)\n\t\t\t}\n\n\t\t\t\treturn bestHand.concat(mutableHand.slice(0, 2))\n\t\t}\n\t\tcase('Two Pair'): {\n\t\t\tconst bestHand = [];\n\t\t\tlet mutableHand = cloneDeep(hand);\n\t\t\t\tfor (let i = 0; i < 2; i++) {\n\t\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.pairs[0].face);\n\t\t\t\t\tbestHand.push(mutableHand[indexOfPair])\n\t\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (let i = 0; i < 2; i++) {\n\n\t\t\t\t\tconst indexOfPair = mutableHand.findIndex(match => match.cardFace === frequencyHistogramMetaData.pairs[1].face);\n\t\t\t\t\tbestHand.push(mutableHand[indexOfPair])\n\t\t\t\t\t\tmutableHand = mutableHand.filter((match, index) => index !== indexOfPair)\n\t\t\t\t}\n\t\t\t\t\treturn bestHand.concat(mutableHand.slice(0, 1))\n\n\t\t}\n\t\tcase('Pair'): {\n\t\t\tconst bestHand = [];\n\t\t\tlet mutableHand = cloneDeep(hand);\t\t\t\n\t\t\t\tfor (let i = 0; i < 2; i++) {\n\t\t\t\t\tconst indexOfPair = mutableHand.findIndex(card => card.cardFace === frequencyHistogramMetaData.pairs[0].face);\n\t\t\t\t\t// CONSIDER : \n\t\t\t\t\tbestHand.push(mutableHand[indexOfPair])\n\t\t\t\t\t\tmutableHand = mutableHand.filter((card, index) => index !== indexOfPair)\n\t\t\t\t}\n\t\t\t\t\treturn bestHand.concat(mutableHand.slice(0, 3))\n\t\t\t\t\n\n\t\t}\n\t\tcase('No Pair'): {\n\t\t\treturn hand.slice(0, 5)\n\t\t}\n\t\tdefault: throw Error('Recieved unfamiliar rank argument in buildBestHand()');\n\t}\n}\n\nconst distributeSidePots = (state) => {\n\tstate.playerHierarchy = buildAbsolutePlayerRankings(state);\n\tconsole.log(\"Ultimate Player Hierarchy Determined:\")\n\tconsole.log(state.playerHierarchy);\n\t\n\tfor (let sidePot of state.sidePots) {\n\t\tconst rankMap = rankPlayerHands(state, sidePot.contestants);\n\t\tstate = battleRoyale(state, rankMap, sidePot.potValue)\n\t}\n\n\tstate.players = state.players.map(player => ({\n\t\t...player,\n\t\troundEndChips: player.chips\n\t}));\n\t\n\treturn state\n}\n\nconst buildAbsolutePlayerRankings = (state) => {\n\t\n\tconst activePlayers = state.players.filter(player => !player.folded);\n\tlet hierarchy = [];\n\t// dupe logic from rankPlayerHands \n\tconst rankMap = new Map([\n\t\t['Royal Flush', []], \n\t\t['Straight Flush', []],\n\t\t['Four Of A Kind', []],\n\t\t['Full House', []],\n\t\t['Flush', []],\n\t\t['Straight', []],\n\t\t['Three Of A Kind', []],\n\t\t['Two Pair', []],\n\t\t['Pair', []],\n\t\t['No Pair', []]\n\t]);\n\n\tactivePlayers.forEach((player, playerIndex) => {\n\t\tconst {\n\t\t\tname,\n\t\t\tshowDownHand: { bestHandRank, bestHand }\n\t\t} = player;\n\t\trankMap.get(bestHandRank).push({\n\t\t\tname,\n\t\t\tbestHand,\n\t\t\tplayerIndex\n\t\t})\n\t})\n\t\n\tfor (const [handRank, playersWhoHoldThisRank] of rankMap) {\n\t\tif (playersWhoHoldThisRank.length > 0) {\n\t\t\tif (handRank === 'Royal Flush') {\n\t\t\t\tconst formattedPlayersWhoHoldThisRank = playersWhoHoldThisRank.map(player => ({\n\t\t\t\t\tname: player.name,\n\t\t\t\t\tbestHand: player.bestHand,\n\t\t\t\t\thandRank\n\t\t\t\t}))\n\t\t\t\thierarchy = hierarchy.concat(formattedPlayersWhoHoldThisRank);\n\t\t\t\tcontinue;\n\t\t\t} \n\t\t\tif (playersWhoHoldThisRank.length === 1) {\n\t\t\t\tconst { name, bestHand } = playersWhoHoldThisRank[0];\n\t\t\t\thierarchy = hierarchy.concat([{\n\t\t\t\t\tname,\n\t\t\t\t\tbestHand, \n\t\t\t\t\thandRank\n\t\t\t\t}]);\n\t\t\t} else if (playersWhoHoldThisRank.length > 1) {\n\t\t\t\tconst sortedComparator = buildComparator(handRank, playersWhoHoldThisRank)\n\t\t\t\t.map((snapshot) => { \n\t\t\t\t\treturn snapshot.sort((a, b) => b.card.value - a.card.value)\n\t\t\t\t});\n\t\t\t\tconst winnerHierarchy = determineContestedHierarchy(sortedComparator, handRank);\n\t\t\t\thierarchy = hierarchy.concat(winnerHierarchy);\n\t\t\t}\n\t\t}\n   }\n\n\treturn hierarchy;\n}\n\nconst determineContestedHierarchy = (sortedComparator, handRank) => {\n\tlet winnerHierarchy = [];\n\tlet loserHierarchy = [];\n\tconst processComparator = (comparator, round = 0) => {\n\t\tif (comparator[0].length === 1) {\n\t\t\tconst { name, bestHand } = comparator[0][0]\n\t\t\twinnerHierarchy = winnerHierarchy.concat([{name, bestHand, handRank}])\n\t\t\treturn;\n\t\t}\n\t\tlet filterableComparator = sortedComparator.map(el => el);\n\t\tconst frame = comparator[round];\n\t\tconst { winningFrame, losingFrame } = processSnapshotFrame(frame);\n\t\tif (losingFrame.length > 0) {\n\t\t\t// Loser Hierarchy can have mixed types, Array of Objects OR Objects\n\t\t\t// The comparators will be processed differently\n\t\t\t// We will run processComparator on all entries. \n\t\t\t// If it's a single object, we can just concat it right up to the winnerHierarchy\n\t\t\t// If it's an array, it's essentially a filtered comparator already and we will run it.\n\t\t\t// Initial Loserhierarchy: [{steve, card:8}]\n\t\t\t// losingFrame: [{dave, card:9}, {jim, card:4}]\n\t\t\t// New loserHierarchy: [[{dave, card:9}, {jim, card:4}], {steve, card:8}]\n\t\t\tconst lowerTierComparator = filterableComparator.map(frame => {\n\t\t\t\treturn frame.filter(snapshot => {\n\t\t\t\t\treturn losingFrame.some(snapshotToMatchName => {\n\t\t\t\t\t\treturn snapshotToMatchName.name === snapshot.name;\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\t\t\t// Push the filtered comparator to the FRONT of the losers queue. \n\t\t\t// Users who are eliminated earlier must be processed last, as they have worse cards than those who are eliminated later.\n\t\t\tloserHierarchy = [lowerTierComparator].concat(loserHierarchy);\n\t\t}\n\t\tif (winningFrame.length === 1) {\n\t\t\tconst {name, bestHand} = winningFrame[0];\n\t\t\twinnerHierarchy = winnerHierarchy.concat([{\n\t\t\t\tname,\n\t\t\t\tbestHand,\n\t\t\t\thandRank\n\t\t\t}])\n\t\t} else if (round === (sortedComparator.length - 1)) {\n\t\t\tconst filteredWinnerSnapshots = winningFrame.map(snapshot => ({\n\t\t\t\tname: snapshot.name,\n\t\t\t\tbestHand: snapshot.bestHand,\n\t\t\t\thandRank\n\t\t\t}))\n\t\t\twinnerHierarchy = winnerHierarchy.concat([filteredWinnerSnapshots]);\n\t\t} else {\n\t\t\tconst higherTierComparator = filterableComparator.map(frame => {\n\t\t\t\treturn frame.filter(snapshot => {\n\t\t\t\t\treturn winningFrame.some(snapshotToMatchName => {\n\t\t\t\t\t\treturn snapshotToMatchName.name === snapshot.name;\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\t\t\tprocessComparator(higherTierComparator, (round + 1));\n\t\t}\n\t}\n\n\tconst processLowTierComparators = (loserHierarchyFrame) => {\n\t\tif (loserHierarchy.length > 0) {\n\t\t\tconst loserComparatorToProcess = loserHierarchyFrame[0];\n\t\t\tloserHierarchy = loserHierarchyFrame.slice(1);\n\t\t\tprocessComparator(loserComparatorToProcess);\n\t\t\tprocessLowTierComparators(loserHierarchy);\n\t\t}\n\t}\n\tprocessComparator(sortedComparator);\n\tprocessLowTierComparators(loserHierarchy);\n\treturn winnerHierarchy;\n}\n\n\n\nconst processSnapshotFrame = (frame) => {\n\tconst highValue = frame[0].card.value;\n\tconst winningFrame = frame.filter(snapshot => snapshot.card.value === highValue);\n\tconst losingFrame = frame.filter(snapshot => snapshot.card.value < highValue);\n\treturn { winningFrame, losingFrame }\n}\n\nconst rankPlayerHands = (state, contestants) => {\n\t\n\tconst rankMap = new Map([\n\t\t['Royal Flush', []], \n\t\t['Straight Flush', []],\n\t\t['Four Of A Kind', []],\n\t\t['Full House', []],\n\t\t['Flush', []],\n\t\t['Straight', []],\n\t\t['Three Of A Kind', []],\n\t\t['Two Pair', []],\n\t\t['Pair', []],\n\t\t['No Pair', []]\n\t]);\n\n\tfor (let contestant of contestants) {\n\t\tconst playerIndex = state.players.findIndex(player => player.name === contestant);\n\t\tconst player = state.players[playerIndex];\n\t\tif (!player.folded) {\n\t\t\trankMap.get(player.showDownHand.bestHandRank).push({\n\t\t\t\tname: player.name,\n\t\t\t\tplayerIndex,\n\t\t\t\tbestHand: player.showDownHand.bestHand,\n\t\t\t});\n\t\t}\n\t}\n\t\treturn rankMap;\n}\n\nconst battleRoyale = (state, rankMap, prize) => {\n\tlet winnerFound = false;\n\n\t// Map.entries().find(([rank, contestants]) => { logic here })\n\t// We can iterate in insertion order this way as well: for (const [key, value] of map) {} .. for of loop will be MUCH cleaner\n\trankMap.forEach((contestants, rank, map) => {\n\t\tif (!winnerFound) {\n\t\t\tif (contestants.length === 1) {\n\t\t\t\twinnerFound = true\n\t\t\t\tconsole.log(\"Uncontested Winner, \", contestants[0].name, \" , beating out the competition with a \", rank)\n\t\t\t\tstate = payWinners(state, contestants, prize, rank)\n\t\t\t} else if (contestants.length > 1) {\n\t\t\t\tconsole.log(contestants)\n\t\t\t\twinnerFound = true\n\t\t\t\t// Return Early. Build Truncated Comparators for different pair functions. length 4 for Pair, length 3 for 2 pairs, length 2 for full house/four of a kind, etc.\n\t\t\t\tconst winners = determineWinner(buildComparator(rank, contestants), rank)\n\t\t\t\t\tif (winners.length === 1) {\n\t\t\t\t\t   console.log(\"Uncontested Winner, \", winners[0].name, \" , beating out the competition with a \", rank)\n\t\t\t\t\t\tstate = payWinners(state, winners, prize, rank)\n\t\t\t\t\t} else {\n\t\t\t\t\t   console.log(\"We have a tie! Split the pot amongst \", winners, \" Who will take the pot with their \", rank)\n\t\t\t\t\t\tstate = payWinners(state, winners, prize, rank)\n\t\t\t\t\t}\n\t\t\t\t// Send Contestants to Algo that Determines best hand of same ranks\n\t\t\t\t// (contestants is an array of all contestants)\n\t\t\t}\n\t\t}})\n\t\t\treturn state\n}\n\nconst payWinners = (state, winners, prize, rank) => {\n\tif(winners.length === 1) {\n\t\tstate.showDownMessages = state.showDownMessages.concat([{\n\t\t\tusers: [winners[0].name],\n\t\t\tprize,\n\t\t\trank\n\t\t}]);\n\t\tconsole.log(\"Transferring \", prize, \" chips to \", winners[0].name)\n\t\tstate.players[winners[0].playerIndex].chips += prize\n\t\tstate.pot -= prize\n\t} else if (winners.length > 1) {\n\t\tconst overflow = prize % winners.length;\n\t\tconst splitPot = Math.floor(prize / winners.length)\n\t\tconsole.log(\"Mediating Tie. Total Prize \", prize, \" split into \", winners.length, \" portions with an overflow of \", overflow)\n\t\tstate.showDownMessages = state.showDownMessages.concat([{\n\t\t\tusers: winners.map(winner => winner.name),\n\t\t\tprize: splitPot,\n\t\t\trank\n\t\t}])\n\t\twinners.forEach(winner => {\n\t\t\tstate.players[winner.playerIndex].chips += splitPot\n\t\t\tstate.pot -= splitPot\n\t\t})\n\t}\n\t\treturn state\n}\n\nconst buildComparator = (rank, playerData) => {\n\tlet comparator;\n\tswitch(rank) {\n\t\t// TODO: Make These MORE DECLARATIVE!\n\t\tcase('Royal Flush'): {\n\t\t\tcomparator = Array.from({length: 1});\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\n\t\t\t\tcomparator.push({\n\t\t\t\t\tname: playerData[index].name, // All Royal Flush hands are instant ties, we don't need to process these contestants further, just divide the pot between all players in this array\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t})\n\t\t\t})\n\t\t\tbreak \n\t\t}\n\t\tcase('Four Of A Kind'): {\n\t\t\tcomparator = Array.from({length: 2}, () => Array.from({length: 0}))\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\n\t\t\t\tcomparator[0].push({\n\t\t\t\t\tcard: playerData[index].bestHand[0], // First Card (Quad) -- same as second, third, and fourth card\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t})\n\t\t\t\tcomparator[1].push({\n\t\t\t\t\tcard: playerData[index].bestHand[4], // Last Card (Kicker)\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t})\n\t\t\t})\n\t\t\tbreak \n\t\t}\n\t\tcase('Full House'): {\n\t\t\tcomparator = Array.from({length: 2}, () => Array.from({length: 0}))\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\n\t\t\t\tcomparator[0].push({\n\t\t\t\t\tcard: playerData[index].bestHand[0], // First Card (Tripple) -- same as second and third card\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t})\n\t\t\t\tcomparator[1].push({\n\t\t\t\t\tcard: playerData[index].bestHand[3], // Fourth Card (Pair) -- same as fifth card\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t})\n\t\t\t})\n\t\t\tbreak \n\t\t}\n\t\tcase('Flush'):\n\t\tcase('No Pair'): {\n\t\t\tcomparator = Array.from({length: 5}, () => Array.from({length: 0}))\n\t\t\t\tplayerData.forEach((playerShowdownData, index) => {\n\t\t\t\t\tfor (let i = 0; i < 5; i++) {\n\t\t\t\t\t\tcomparator[i].push({\n\t\t\t\t\t\t\tcard: playerData[index].bestHand[i], // We need to check all 5 cards of a flush/no-pair\n\t\t\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t}\n\t\tcase('Three Of A Kind'): {\n\t\t\tcomparator = Array.from({length: 3}, () => Array.from({length: 0}))\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\n\t\t\t\tcomparator[0].push({\n\t\t\t\t\tcard: playerData[index].bestHand[0], // First Card (Tripple) -- same as second and third cards\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t});\n\t\t\t\tcomparator[1].push({\n\t\t\t\t\tcard: playerData[index].bestHand[3], // Fourth Card (First Kicker)\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t});\n\t\t\t\tcomparator[2].push({\n\t\t\t\t\tcard: playerData[index].bestHand[4], // Fifth Card (Second Kicker)\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t});\n\t\t\t})\n\t\t\tbreak \n\t\t}\n\t\tcase('Straight'):\n\t\tcase('Straight Flush'): {\n\t\t\tcomparator = Array.from({length: 1}, () => Array.from({length: 0}))\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\n\t\t\t\tcomparator[0].push({\n\t\t\t\t\tcard: playerData[index].bestHand[0], // The highest card of a straight will determine the winner, all others are concurrent and will be the same\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t})\n\t\t\t})\n\t\t\tbreak \n\t\t}\n\t\tcase('Two Pair'): {\n\t\t\tcomparator = Array.from({length: 3}, () => Array.from({length: 0}))\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\n\t\t\t\tcomparator[0].push({\n\t\t\t\t\tcard: playerData[index].bestHand[0], // First card (First Pair) -- same as second card\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t})\n\t\t\t\tcomparator[1].push({\n\t\t\t\t\tcard: playerData[index].bestHand[2], // Third card (Second Pair) -- same as fourth card\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t})\n\t\t\t\tcomparator[2].push({\n\t\t\t\t\tcard: playerData[index].bestHand[4], // Last Card (Kicker)\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t})\n\t\t\t})\n\t\t\tbreak \n\t\t}\n\t\tcase('Pair'): {\n\t\t\tcomparator = Array.from({length: 4}, () => Array.from({length: 0}))\n\t\t\tplayerData.forEach((playerShowdownData, index) => {\n\t\t\t\tcomparator[0].push({\n\t\t\t\t\tcard: playerData[index].bestHand[0], // First Card (Pair) -- same as second card\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t});\n\t\t\t\tcomparator[1].push({\n\t\t\t\t\tcard: playerData[index].bestHand[2], // Third Card -- first kicker\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t});\n\t\t\t\tcomparator[2].push({\n\t\t\t\t\tcard: playerData[index].bestHand[3], // Fourth Card -- second kicker\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t});\n\t\t\t\tcomparator[3].push({\n\t\t\t\t\tcard: playerData[index].bestHand[4], //  Fifth Card -- third kicker\n\t\t\t\t\tname: playerData[index].name,\n\t\t\t\t\tplayerIndex: playerData[index].playerIndex,\n\t\t\t\t\tbestHand: playerData[index].bestHand\n\t\t\t\t});\n\t\t\t})\n\t\t\tbreak \n\t\t}\n\t\tdefault: throw Error('Recieved unfamiliar rank argument in buildComparator()');\n\t}\n\t\treturn comparator\n}\n\nconst determineWinner = (comparator, rank) => {\n\tlet winners;\n\t// We can definitely refactor this.\n\tif (rank === 'Royal Flush') return comparator\n\t\tfor (let i = 0; i < comparator.length; i++) {\n\t\t\tlet highValue = 0;\n\t\t\tlet losers = [];\n\t\t\t// Sort Comparator, highest card first\n\t\t\twinners = comparator[i].sort((a, b) => b.card.value - a.card.value).reduce((acc, cur, index) => {\n\t\t\t\tif (cur.card.value > highValue) {\n\t\t\t\t\t\n\t\t\t\t\thighValue = cur.card.value;\n\t\t\t\t\tacc.push({\n\t\t\t\t\t\tname: cur.name,\n\t\t\t\t\t\tplayerIndex: cur.playerIndex,\n\t\t\t\t\t});\n\t\t\t\t\t\treturn acc;\n\t\t\t\t} else if (cur.card.value === highValue) {\n\t\t\t\t\tacc.push({\n\t\t\t\t\t\tname: cur.name,\n\t\t\t\t\t\tplayerIndex: cur.playerIndex,\n\t\t\t\t\t});\n\t\t\t\t\t\treturn acc;\n\t\t\t\t} else if (cur.card.value < highValue) {\n\t\t\t\t\tlosers.push(cur.name);\n\t\t\t\t\treturn acc; \n\t\t\t\t}\n\t\t\t}, [])\n\n\t\t\tif(winners.length === 1 || i === comparator.length) {\n\t\t\t\treturn winners\n\t\t\t} else {\n\t\t\t\tif (losers.length >= 1) {\n\t\t\t\t\tlosers.forEach((nameToExtract) => {\n\t\t\t\t\t\tcomparator = comparator.map(snapshot => snapshot.filter((el) => el.name !== nameToExtract));\n\t\t\t\t\t})\n \t\t\t\t}\n\t\t\t}\n\t\t}\n\treturn winners\n\n}\n\nconst checkFlush = (suitHistogram) => {\n\tlet isFlush;\n\tlet flushedSuit;\n\tfor (let suit in suitHistogram) {\n\t\tif (suitHistogram[suit] >= 5) {\n\t\t\treturn { \n\t\t\t\tisFlush: true,\n\t\t\t\tflushedSuit: suit,\n\t\t\t}\n\t\t} \n\t}\n\treturn {\n\t\tisFlush: false,\n\t\tflushedSuit: null,\n\t}\n}\n\nconst checkRoyalFlush = (flushMatchCards) => {\n\tif ((flushMatchCards[0].value === 13) &&\n\t\t(flushMatchCards[1].value === 12) &&\n\t\t(flushMatchCards[2].value === 11) &&\n\t\t(flushMatchCards[3].value === 10) &&\n\t\t(flushMatchCards[4].value === 10)) { \n\t\t\treturn true  \n\t\t} else { return false } \n}\n\nconst checkStraightFlush = (flushMatchCards) => {\n\tconst valueSet = buildValueSet(flushMatchCards);\n\tconst { isStraight, isLowStraight, concurrentCardValues, concurrentCardValuesLow } = checkStraight(valueSet);\n\treturn {\n\t\tisStraightFlush: isStraight,\n\t\tisLowStraightFlush: isLowStraight,\n\t\tconcurrentSFCardValues: concurrentCardValues,\n\t\tconcurrentSFCardValuesLow: concurrentCardValuesLow,\n\t}\n}\n\nconst analyzeHistogram = (hand, frequencyHistogram) => {\n\t// Is first argument required? - May be unused\n\tlet isFourOfAKind = false;\n\tlet isFullHouse = false\n\tlet isThreeOfAKind = false;\n\tlet isTwoPair = false;\n\tlet isPair = false;\n\tlet numTripples = 0;\n\tlet numPairs = 0;\n\tlet frequencyHistogramMetaData = {\n\t\tpairs: [],\n\t\ttripples: [],\n\t\tquads: [],\n\t}\n\tfor (let cardFace in frequencyHistogram) {\n\t\tif (frequencyHistogram[cardFace] === 4) {\n\t\t\tisFourOfAKind = true\n\t\t\t\tfrequencyHistogramMetaData.quads.push({\n\t\t\t\t\tface: cardFace,\n\t\t\t\t\tvalue: VALUE_MAP[cardFace]\n\t\t\t\t})\n\t\t}\n\t\tif (frequencyHistogram[cardFace] === 3) {\n\t\t\tisThreeOfAKind = true\n\t\t\tnumTripples++\n\t\t\t\tfrequencyHistogramMetaData.tripples.push({\n\t\t\t\t\tface: cardFace,\n\t\t\t\t\tvalue: VALUE_MAP[cardFace]\n\t\t\t\t})\n\t\t}\n\t\tif (frequencyHistogram[cardFace] === 2) {\n\t\t\tisPair = true\n\t\t\tnumPairs++\n\t\t\t\tfrequencyHistogramMetaData.pairs.push({\n\t\t\t\t\tface: cardFace,\n\t\t\t\t\tvalue: VALUE_MAP[cardFace]\n\t\t\t\t})\n\t\t}\n\t}\n\n\t\tfrequencyHistogramMetaData.pairs = frequencyHistogramMetaData.pairs.map(el => el).sort((a,b) => b.value - a.value)\n\t\tfrequencyHistogramMetaData.tripples = frequencyHistogramMetaData.tripples.map(el => el).sort((a,b) => b.value - a.value)\n\t\tfrequencyHistogramMetaData.quads = frequencyHistogramMetaData.quads.map(el => el).sort((a,b) => b.value - a.value)\n\t// Ensure histogram arrays are sorted in descending order to build best hand top down\n\t// can just check metadata length and omit the counters\n\tif((numTripples >= 2) || (numPairs >= 1 && numTripples >=1)) {\n\t\tisFullHouse = true\n\t}\n\tif(numPairs >= 2) {\n\t\tisTwoPair = true\n\t}\n\n\t\treturn {\n\t\t\tisFourOfAKind,\n\t\t\tisFullHouse,\n\t\t\tisThreeOfAKind,\n\t\t\tisTwoPair,\n\t\t\tisPair,\n\t\t\tfrequencyHistogramMetaData\n\t\t}\n\n}\n\nconst checkStraight = (valueSet) => {\n\tif (valueSet.length < 5) return false\n\tlet numConcurrentCards = 0;\n\tlet concurrentCardValues = [];\n\tfor (let i = 1; i < valueSet.length; i++) {\n\t\tif (numConcurrentCards === 5) {\n\t\t\treturn {\n\t\t\t\tisStraight: true,\n\t\t\t\tconcurrentCardValues\n\t\t\t}\n\t\t}\n\t\tif ((valueSet[i] - valueSet[i - 1]) === -1) {\n\t\t\tif(numConcurrentCards === 0) {\n\t\t\t\tnumConcurrentCards = 2;\n\t\t\t\t\tconcurrentCardValues.push(valueSet[i - 1]);\n\t\t\t\t\tconcurrentCardValues.push(valueSet[i]);\n\n\t\t\t} else { \n\t\t\t\tnumConcurrentCards++;\n\t\t\t\t\tconcurrentCardValues.push(valueSet[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tnumConcurrentCards = 0;\n\t\t\tconcurrentCardValues = []; \n\t\t}\n\t}\n\tif (numConcurrentCards >= 5) {\n\t\treturn {\n\t\t\tisStraight: true,\n\t\t\tconcurrentCardValues\n\t\t}\n\t} else {\n\t\tif (valueSet[0] === 13) {\n\t\t\tlet { isLowStraight, concurrentCardValuesLow } = checkLowStraight(cloneDeep(valueSet));\n\n\t\t\tif (isLowStraight) return {\n\t\t\t\tisStraight: true,\n\t\t\t\tisLowStraight,\n\t\t\t\tconcurrentCardValues, \n\t\t\t\tconcurrentCardValuesLow,\n\t\t\t}\n\t\t} \n\t\treturn { \n\t\t\tisStraight: false,\n\t\t\tisLowStraight: false, \n\t\t\tconcurrentCardValues, \n\t\t} \n\t}\n}\n\nconst checkLowStraight = (valueSetCopy) => {\n\tlet numConcurrentCards = 0;\n\tlet concurrentCardValuesLow = [];\n\tvalueSetCopy[0] = 0; // Convert Ace High Value (13) to Low Wildcard Value (0)\n\tconst sortedValueSetCopy = valueSetCopy.map(el => el).sort((a,b) => a - b); // Sort in Ascending Order \n\t// Basically look for [0, 1, 2, 3, 4,] AKA [A, 2, 3, 4, 5]\n\tfor (let i = 1; i < 5; i++) {\n\t\tif (numConcurrentCards >= 5) {\n\t\t\treturn {\n\t\t\t\tisLowStraight: true,\n\t\t\t\tconcurrentCardValuesLow,\n\t\t\t}\n\t\t}\n\t\tif((sortedValueSetCopy[i] - sortedValueSetCopy[i - 1]) === 1 ) {\n\t\t\tif (numConcurrentCards === 0) {\n\t\t\t\tnumConcurrentCards = 2;\n\t\t\t\t\tconcurrentCardValuesLow.push(sortedValueSetCopy[i - 1]);\n\t\t\t\t\tconcurrentCardValuesLow.push(sortedValueSetCopy[i]);\n\t\t\t} else { \n\t\t\t\tnumConcurrentCards++;\n\t\t\t\tconcurrentCardValuesLow.push(sortedValueSetCopy[i]); \n\t\t\t}\t\n\t\t} else { \n\t\t\tnumConcurrentCards = 0;\n\t\t\tconcurrentCardValuesLow = [];\n\t\t}\n\t}\n\tif (numConcurrentCards >= 5) {\n\t\treturn {\n\t\t\tisLowStraight: true,\n\t\t\tconcurrentCardValuesLow,\n\t\t}\n\t} else { \n\t\treturn {\n\t\t\tisLowStraight: false,\n\t\t\tconcurrentCardValuesLow,\n\t\t} \n\t}\n}\n\n\nconst buildValueSet = (hand) => {\n\treturn Array.from(new Set(hand.map(cardInfo => cardInfo.value)))\n}\n\nconst dealMissingCommunityCards = (state) => {\n\tconst cardsToPop = 5 - state.communityCards.length\n\tif (cardsToPop >= 1) {\n\t\tlet animationDelay = 0;\n\t\tconst { mutableDeckCopy, chosenCards } = popShowdownCards(state.deck, cardsToPop);\n\t\t\t\n\t\t\tfor (let card of chosenCards) {\n\t\t\t\tcard.animationDelay = animationDelay;\n\t\t\t\tanimationDelay = animationDelay + 250;\n\t\t\t\tstate.communityCards.push(card);\n\t\t\t}\n\n\t\tstate.deck = mutableDeckCopy;\n\t}\n\tstate.phase = 'showdown'\n\treturn state\n}\n\nexport { generateDeckOfCards, shuffle, popCards, dealPrivateCards, dealFlop, dealTurn, dealRiver, showDown, dealMissingCommunityCards, analyzeHistogram, checkFlush, checkRoyalFlush, checkStraightFlush, checkStraight, buildValueSet }","import { dealFlop, dealTurn, dealRiver, showDown } from './cards.js';\nimport { determineNextActivePlayer } from './players.js';\n\nconst determineBlindIndices = (dealerIndex, numPlayers) => {\n\treturn({\n\t\tbigBlindIndex: (dealerIndex + 2) % numPlayers,\n\t\tsmallBlindIndex: (dealerIndex + 1) % numPlayers,\n\t});\n}\n\nconst anteUpBlinds = (players, blindIndices, minBet) => {\n\tconsole.log(players);\n\tconst { bigBlindIndex, smallBlindIndex } = blindIndices;\n\tplayers[bigBlindIndex].bet =players[bigBlindIndex].chips>20? minBet:players[bigBlindIndex].chips;\n\tplayers[bigBlindIndex].chips = players[bigBlindIndex].chips - players[bigBlindIndex].bet;\n\tplayers[smallBlindIndex].bet = players[smallBlindIndex].chips>10?minBet / 2:players[smallBlindIndex].chips;\n\tplayers[smallBlindIndex].chips = players[smallBlindIndex].chips - players[smallBlindIndex].bet;\n\t\treturn players\n}\n\nconst determineMinBet = (highBet, playerChipsStack, playerBet) => {\n\tconsole.log(playerChipsStack, playerBet)\n\tconst playerTotalChips = playerChipsStack + playerBet\n\tif (playerTotalChips < highBet) {\n\t\treturn playerTotalChips;\n\t} else {\n\t\treturn highBet;\n\t}\n}\nconst handleBet = (state, bet, min, max) => {\n\tconsole.log(state, bet, min, max)\n\tif (bet < min) {\n\t\tstate.betInputValue = min;\n\t\treturn console.log(\"Invalid Bet\");\n\t}\n\tif (bet > max) {\n\t\tstate.betInputValue = max;\n\t\treturn console.log(\"Invalid Bet\")\n\t}\n\n\tif (bet > state.highBet) {\n\t\t// minbet and highbet may be condensed to a single property\n\t\tstate.highBet = bet;\n\t\tstate.minBet = state.highBet;\n\t\tfor (let player of state.players) {\n\t\t\tif (!player.folded || !player.chips === 0) {\n\t\t\t\tplayer.betReconciled = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t\tconst activePlayer = state.players[state.activePlayerIndex];\n\t\tconst subtractableChips = bet - activePlayer.bet;\n\t\tconsole.log(subtractableChips)\n\t\tactivePlayer.bet = bet;\n\n\t\tactivePlayer.chips = activePlayer.chips - subtractableChips;\n\t\tif (activePlayer.chips === 0) {\n\t\t\tactivePlayer.allIn = true;\n\t\t\tstate.numPlayersAllIn++\n\t\t}\n\t\tactivePlayer.betReconciled = true;\n\treturn determineNextActivePlayer(state)\n}\n\nconst handleFold = (state) => {\n\tconst activePlayer = state.players[state.activePlayerIndex];\n\t\tactivePlayer.folded = true;\n\t\tactivePlayer.betReconciled = true;\n\t\tstate.numPlayersFolded++\n\t\tstate.numPlayersActive--\n\n\t\tconst nextState = determineNextActivePlayer(state)\n\t\treturn nextState\n}\n\nconst handlePhaseShift = (state) => {\n\tswitch(state.phase) {\n\t\tcase('betting1'): {\n\t\t\tstate.phase = 'flop';\n\t\t\treturn dealFlop(reconcilePot(state));\n\t\t}\n\t\tcase('betting2'): {\n\t\t\tstate.phase = 'turn';\n\t\t\treturn dealTurn(reconcilePot(state));\n\t\t}\n\t\tcase('betting3'): {\n\t\t\tstate.phase = 'river'\n\t\t\treturn dealRiver(reconcilePot(state));\n\t\t}\n\t\tcase('betting4'): {\n\t\t\tstate.phase = 'showdown'\n\t\t\treturn showDown(reconcilePot(state));\n\t\t}\n\t\tdefault: throw Error(\"handlePhaseShift() called from non-betting phase\")\n\t}\n}\n\nconst reconcilePot = (state) => {\n\tfor (let player of state.players) {\n\n\t\tstate.pot = state.pot + player.bet;\n\n\t\tplayer.sidePotStack = player.bet;\n\t\tplayer.betReconciled = false; // This is used as a marker to determine whether to adv to next round of betting\n\t}\n\n\t\t// Why would we even need to condense sidepots?\n\t\t// When would there be a situation where there were 2 sidepots with the same player names? \n\t\t// Well, if there were 2 rounds of betting and all players called in\n\t\t/*\n\t\t\t[{\n\t\t\t\tcontestants: [\"Jim\", \"Mary\", \"Jake\"],\n\t\t\t\tpot: 2000 // FROM THE FLOP\n\t\t\t},\n\t\t\t{\n\t\t\t\tcontestatnts: [\"Jim\", \"Mary\", \"Jake\"],\n\t\t\t\tpot: 3100 // FROM THE TURN\n\t\t\t}]\n\t\t\tIt's in our interest to condense these since processing each one requires us to make card comparator functions, which are the most expensive functions here (lots of sorting, etc)\n\t\t*/\n\tstate = condenseSidePots(calculateSidePots(state, state.players));\n\n\tfor (let player of state.players) {\n\t\tplayer.currentRoundChipsInvested += player.bet;\n\t\tplayer.bet = 0 // Reset all player bets to 0 for the start of the next round\n\t}\n\n\tstate.minBet = 0; // Reset markers which control min/max bet validation\n\tstate.highBet = 0;\n\tstate.betInputValue = 0;\n\t\treturn state\n}\n\n\nconst calculateSidePots = (state, playerStacks) => {\n\t// Filter out all players who either\n\t// \t\t1) Upon first iteration of the function - did not bet this round\n\t//\t\t2) Upon subsequent iterations, already had a side pot built for them\n\tconst investedPlayers = playerStacks.filter(player => player.sidePotStack > 0)\n\tif (investedPlayers.length === 0) {\n\t\t// Function completed, exit.\n\t\treturn state\n\t}\n\tif (investedPlayers.length === 1) {\n\t\t// This condition occurs when there is a single player who has bet an excess amount of chips. Refund and exit.\n\t\tconst playerToRefund = state.players[state.players.findIndex(player => player.name === investedPlayers[0].name)];\n\t\tplayerToRefund.chips = playerToRefund.chips + investedPlayers[0].sidePotStack;\n\t\tstate.pot -= investedPlayers[0].sidePotStack\n\t\t\treturn state\n\t}\n\t\t// Sort all players, Smallest stack first.\n\t\tconst ascBetPlayers = investedPlayers.sort((a,b) => a.sidePotStack - b.sidePotStack);\n\t\tconst smallStackValue = ascBetPlayers[0].sidePotStack;\n\t\t\n\t\tconst builtSidePot = ascBetPlayers.reduce((acc, cur) => {\n/***\n\tIf we have a group of players with this bet configuration\n\t[100, 200, 300, 500, 1000]\n\t\tWe build a side pot for the player with 100 chips invested, by subtracting 100 from each index and accumulating them.\n\t\tEach player who we subtract from is an eligible contestant\n\t\t\tWe should end up with [0, 100, 200, 400, 900] in the original array\n\t\t\tAnd the accumulator will be { potValue: 500, contestants[(all the players in the original array)]}\n\t\t\tMutations will be done to the original array to persist changes\n\t\t\t\tWe can pass this to the next iteration of the function to repeat logic recursively, filtering out the \"0\"\n\t\t\t\t[100, 200, 400, 900] --> [0, 100, 300, 800] {potValue: 400}\n\t\t\t\t[100, 300, 800] -> [0, 200, 700] {potValue: 300}\n\t\t\t\t[200, 700] -> [0, 500] {potValue: 400} --> refund 500\n***/\n\t\t\tif (!cur.folded) {\n\t\t\t\tacc.contestants.push(cur.name);\n\t\t\t}\n\t\t\tacc.potValue = acc.potValue + smallStackValue;\n\t\t\tcur.sidePotStack = cur.sidePotStack - smallStackValue;\n\t\t\t\treturn acc\n\t\t}, {\n\t\t\tcontestants: [],\n\t\t\tpotValue: 0,\n\t\t});\n\t\t\tstate.sidePots.push(builtSidePot);\n\t\t\t\treturn calculateSidePots(state, ascBetPlayers)\n\n}\n\nconst condenseSidePots = (state) => {\n\tif (state.sidePots.length > 1) {\n\t\tfor (let i = 0; i < state.sidePots.length; i++) {\n\t\t\tfor (let n = i + 1; n < state.sidePots.length; n++ ) {\n\t\t\t\tif (arrayIdentical(state.sidePots[i].contestants, state.sidePots[n].contestants)) {\n\t\t\t\t\tstate.sidePots[i].potValue = state.sidePots[i].potValue + state.sidePots[n].potValue;\n\t\t\t\t\tstate.sidePots = state.sidePots.filter((el, index) => index !== n);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\treturn state\t\n}\n\nconst arrayIdentical = (arr1, arr2) => {\n\n\tif (arr1.length !== arr2.length) {\n\t\treturn false\n\t}\n\t\treturn arr1.map(el => arr2.includes(el)).filter(bool => bool !== true).length !== 0 ? false : true;\n\t\t// Can be simplified return arr1.every(el => arr2.includes(el));\n}\nexport { \n\tdetermineBlindIndices, \n\tanteUpBlinds, \n\tdetermineMinBet,\n\thandleBet,\n\thandleFold,\n\thandlePhaseShift,\n\treconcilePot\n}","import React from 'react';\n\nimport Handle from \"../components/slider/Handle\";\nimport Track from \"../components/slider/Track\";\nimport { sliderStyle, railStyle } from \"../components/slider/styles\";\n\nimport { Slider, Rail, Handles, Tracks } from 'react-compound-slider'\n\nimport { \n  determineMinBet\n} from './bet.js';\n\nconst renderPhaseStatement = (phase) => {\n\tswitch(phase) {\n\t\tcase('loading'): return 'Finding a Table, Please Wait';\n\t\tcase('initialDeal'): return 'Dealing out the cards';\n\t\tcase('betting1'): return 'Betting 1';\n\t\tcase('flop'): return 'Flop';\n\t\tcase('betting2'): return 'Flop';\n\t\tcase('turn'): return 'Turn';\n\t\tcase('betting3'): return 'Turn';\n\t\tcase('river'): return 'River';\n\t\tcase('betting4'): return 'River';\n\t\tcase('showdown'): return 'Show Your Cards!';\n\t\tdefault: throw Error('Unfamiliar phase returned from renderPhaseStatement()');\n\t}\n}\n\nconst renderUnicodeSuitSymbol = (suit) => {\n\tswitch(suit) {\n\t\tcase('Heart'): return '\\u2665';\n\t\tcase('Diamond'): return '\\u2666';\n\t\tcase('Spade'): return '\\u2660';\n\t\tcase('Club'): return '\\u2663';\n\t\tdefault: throw Error('Unfamiliar String Recieved in Suit Unicode Generation');\n\t}\n}\n\nconst renderActionButtonText = (highBet, betInputValue, activePlayer) => {\n\tif ((highBet === 0) && (betInputValue === 0)) {\n\t\treturn 'Check'\n\t} else if ((highBet === betInputValue)) {\n\t\treturn 'Call'\n\t} else if ((highBet === 0) && (betInputValue > highBet)) {\n\t\treturn 'Bet'\n\t} else if ((betInputValue < highBet) || (betInputValue === activePlayer.chips + activePlayer.bet)) {\n\t\treturn 'All-In!'\n\t} else if (betInputValue > highBet) {\n\t\treturn 'Raise'\n\t} \n}\n\nconst renderNetPlayerEarnings = (endChips, startChips) => {\n\tconst netChipEarnings = (endChips - startChips);\n\tconst win = (netChipEarnings > 0);\n\tconst none = (netChipEarnings === 0);\t\n\treturn(\n\t\t<div class={`showdownPlayer--earnings ${(win) ? ('positive') : (none) ? ('') : ('negative')}`}>\n\t\t\t{`${(win) ? ('+') : ('')}${netChipEarnings}`}\n\t\t</div>  \n\t)\n}\n\nconst renderShowdownMessages = (showDownMessages) => {\n    return showDownMessages.map((message, index) => {\n\t\tconst { users, prize, rank } = message;\n\t\tif (users.length > 1) {\n\t\t\treturn (\n\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t<div className=\"message--container\">\n\t\t\t\t\t\t<span className=\"message--user\">\n\t\t\t\t\t\t\t{`${users.length} players `}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"message--content\">\n\t\t\t\t\t\t\t{`split the pot with a `}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"message--rank\">\n\t\t\t\t\t\t\t{`${rank}!`}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{ \n\t\t\t\t\t\tusers.map(user => {\n\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t<div key={index + user} class=\"message--container\">\n\t\t\t\t\t\t\t\t\t<span className=\"message--player\">\n\t\t\t\t\t\t\t\t\t\t{`${user} `}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span className=\"message--content\">\n\t\t\t\t\t\t\t\t\t\t{`takes `}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span className=\"message--earnings\">\n\t\t\t\t\t\t\t\t\t\t{`${prize} chips `}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span className=\"message--content\">\n\t\t\t\t\t\t\t\t\t\t{`from the pot.`}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</React.Fragment>\n\t\t\t)\n\t\t} else if (users.length === 1) {\n\t\t\treturn(\n\t\t\t\t<div key={index} className=\"message--container\">\n\t\t\t\t\t<span className=\"message--player\">\n\t\t\t\t\t\t{`${users[0]} `}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"message--content\">\n\t\t\t\t\t\t{`wins `}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"message--earnings\">\n\t\t\t\t\t\t{`${prize} chips `}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"message--content\">\n\t\t\t\t\t\t{`from the pot with a `}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"message--rank\">\n\t\t\t\t\t\t{`${rank}!`}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t})\n}\n\nconst renderActionMenu = (highBet, players, activePlayerIndex, phase, changeSliderInputFn) => {\n\tconst min = determineMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet)\n\tconst max = players[activePlayerIndex].chips + players[activePlayerIndex].bet\n\treturn(\n\t\t(phase === 'betting1' || phase === 'betting2' || phase === 'betting3' || phase === 'betting4') ? (players[activePlayerIndex].robot) ? (<h4> {`Current Move: ${players[activePlayerIndex].name}`}</h4>) : (\n\t\t\t<React.Fragment>\n\t\t\t<Slider\n\t\t\t\trootStyle={sliderStyle}\n\t\t\t\tdomain={[min, max]}\n\t\t\t\tvalues={[min]}\n\t\t\t\tstep={1}\n\n\t\t\t\tonChange={changeSliderInputFn}\n\t\t\t\t\tmode={2}\n\t\t\t>\n\t\t\t\t<Rail>\n\t\t\t\t\t{\n\t\t\t\t\t\t({ getRailProps }) => (\n\t\t\t\t\t\t\t<div style={railStyle} {...getRailProps()} />\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</Rail>\n\t\t\t\t<Handles>\n\t\t\t\t\t{ \n\t\t\t\t\t\t({ handles, getHandleProps}) => (\n\t\t\t\t\t\t\t<div className='slider-handles'>\n\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\thandles.map(handle => (\n\t\t\t\t\t\t\t\t\t\t<Handle\n\t\t\t\t\t\t\t\t\t\t\tkey={handle.id}\n\t\t\t\t\t\t\t\t\t\t\thandle={handle}\n\t\t\t\t\t\t\t\t\t\t\tgetHandleProps={getHandleProps}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</Handles>\n\t\t\t\t<Tracks right={false}>\n\t\t\t\t\t{\n\t\t\t\t\t\t({ tracks, getTrackProps }) => (\n\t\t\t\t\t\t\t<div className='slider-tracks'>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttracks.map(\n\t\t\t\t\t\t\t\t\t\t({ id, source, target }) => (\n\t\t\t\t\t\t\t\t\t\t\t<Track\n\t\t\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\t\t\tsource={source}\n\t\t\t\t\t\t\t\t\t\t\t\ttarget={target}\n\t\t\t\t\t\t\t\t\t\t\t\tgetTrackProps={getTrackProps}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</Tracks>\n\t\t\t</Slider>\n\t\t\t</React.Fragment>\n\t\t) : null\n\t)\n}\n\nexport { \n\trenderPhaseStatement, \n\trenderUnicodeSuitSymbol, \n\trenderShowdownMessages,\n\trenderNetPlayerEarnings,\n\trenderActionMenu,\n\trenderActionButtonText \n}\n\n","import React from 'react';\nimport { \n  renderUnicodeSuitSymbol \n} from '../../utils/ui';\n\nconst Card = (props) => {\n  const { \n    cardData: {\n      suit,\n      cardFace,\n      animationDelay\n    },\n    applyFoldedClassname\n  } = props;\n  return(\n    <div \n      key={`${suit} ${cardFace}`} \n      className={`playing-card cardIn ${(applyFoldedClassname ? ' folded' : '')}`} \n      style={{animationDelay: `${(applyFoldedClassname) ?  0 : animationDelay}ms`}}>\n      <h6\n        style={{color: `${(suit === 'Diamond' || suit === 'Heart') ? 'red' : 'black'}`}}>\n        {`${cardFace} ${renderUnicodeSuitSymbol(suit)}`}\n      </h6>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\n\nconst HiddenCard = (props) => {\n  const { \n    cardData: {\n      suit,\n      cardFace,\n      animationDelay\n    },\n    applyFoldedClassname\n  } = props;\n  return(\n    <div \n      key={`${suit} ${cardFace}`} \n      className={`playing-card cardIn robotcard${(applyFoldedClassname ? ' folded' : '')}`} \n      style={{animationDelay: `${(applyFoldedClassname) ?  0 : animationDelay}ms`}}>\n    </div>\n  )\n}\n\nexport default HiddenCard;","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nfunction PlayerStatusNotificationBox({index, isActive, content, endTransition}) {\n    return(\n        <CSSTransition \n            in={isActive} \n            timeout={{\n                appear: 0,\n                enter: 0,\n                exit: 1250,\n               }}\n            classNames=\"transitionable-actionBox\" \n            onEntered={() => endTransition(index)}\n        >\n            <div className=\"actionBox\">\n            {`${content}`}\n            </div>\n        </CSSTransition>\n    )\n}\n\nexport default PlayerStatusNotificationBox;","import React from 'react';\n\nimport Card from '../cards/Card';\nimport HiddenCard from '../cards/HiddenCard';\n\nimport PlayerStatusNotificationBox from \"./PlayerStatusNotificationBox\";\n\nconst dealerChipImageURL = \"/assets/chip.svg\";\nconst chipCountImageURL = \"./assets/chips.png\";\nconst playerBetImageURL = \"./assets/bet.svg\";\n\nconst Player = (props) => {\n  const {\n    arrayIndex,\n    playerAnimationSwitchboard,\n    endTransition,\n    hasDealerChip,\n    isActive,\n    phase,\n    clearCards,\n    player: {\n      robot,\n      folded,\n      cards,\n      avatarURL,\n      name,\n      chips,\n      bet\n    }\n  } = props;\n\n  const renderDealerChip = () => {\n    if (hasDealerChip) {\n      return (\n        <div className=\"dealer-chip-icon-container\">\n          <img src={dealerChipImageURL} alt=\"Dealer Chip\"/>\n        </div>\n      )\n    } else return null;\n  }\n\n  const renderPlayerCards = () => {\n    let applyFoldedClassname;\n\n    if (folded || clearCards) {\n      applyFoldedClassname = true\n    }\n\n    if (robot) {\n      return cards.map((card, index)=> {\n        if (phase !== 'showdown') {\n          return(\n            <HiddenCard key={index} cardData={card} applyFoldedClassname={applyFoldedClassname}/>\n          );\n        } else {\n          // Reset Animation Delay\n          const cardData = {...card, animationDelay: 0}\n          return(\n            <Card key={index} cardData={cardData} applyFoldedClassname={applyFoldedClassname}/>\n          );\n        }\n      });\n    }\n    else {\n      return cards.map((card, index) => {\n        return(\n          <Card key={index} cardData={card} applyFoldedClassname={applyFoldedClassname}/>\n        );\n      });\n    }\n  }\n\n  const ifAnimating = (playerBoxIndex) => { \n    if (playerAnimationSwitchboard[playerBoxIndex].isAnimating) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return (\n    <div className={`player-entity--wrapper p${arrayIndex}`}>\n      <PlayerStatusNotificationBox\n        index={arrayIndex}\n        isActive={ifAnimating(arrayIndex)}\n        content={playerAnimationSwitchboard[arrayIndex].content}\n        endTransition={endTransition}\n      />\n      <div className='centered-flex-row abscard'>\n        { renderPlayerCards() }\n      </div>\n      <div className=\"player-entity--container\">\n        <div className=\"player-avatar--container\">\n          <img \n            className={`player-avatar--image${(isActive ? ' activePlayer' : '')}`} \n            src={avatarURL} \n            alt=\"Player Avatar\" \n          />\n          <h5 className=\"player-info--name\" style={{fontSize: 15}}>\n            {`${name}`}\n          </h5>\n          <div className=\"player-info--stash--container\">\n            <img className=\"player-info--stash--image\" src={chipCountImageURL} alt=\"Player Stash\"/>\n            <h5>{`${chips}`}</h5>\n          </div>\n          <div className=\"player-info--bet--container\">\n            <h5>{`Bet: ${bet}`}</h5>\n            <img className=\"player-info--bet--image\" src={chipCountImageURL} alt=\"Player Bet\" />\n          </div>\n          { renderDealerChip() }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Player;","import React from 'react';\n\nimport Card from '../cards/Card';\n\nconst renderCards = (cards) => {\n  return cards.map((card, index) => {\n    const cardData = {...card, animationDelay: 0}\n    return <Card key={index} cardData={cardData} />\n  })\n}\nconst ShowdownPlayer = (props) => {\n  const {\n    name,\n    avatarURL,\n    cards\n  } = props;\n  return (\n    <div className=\"player-entity--container\">\n      <div className=\"player-avatar--container\">\n        <img \n            className=\"player-avatar--image\" \n            src={avatarURL}  \n            alt=\"Player Avatar\"\n        />\n        <h5 className=\"player-info--name\">\n            {`${name}`}\n        </h5>\n      </div>\n      <div class=\"showdownPlayer--privateCards\">\n        <h5 class=\"showdownPlayer--cards--heading\">\n          Private Cards\n        </h5>\n        <div class=\"showdownPlayer--cards\">\n          { renderCards(cards) }\n        </div>    \n      </div>\n    </div>\n  )\n}\n\nexport default ShowdownPlayer;","import { \n\thandleBet, \n\thandleFold, \n\tdetermineMinBet \n} from './bet.js';\n\nimport { \n\tanalyzeHistogram, \n\tcheckFlush, \n\tcheckRoyalFlush, \n\tcheckStraightFlush, \n\tcheckStraight, \n\tbuildValueSet \n} from './cards.js'\n\nimport { \n\trenderActionButtonText \n} from './ui.js';\n\nconst handleAI = (state, pushAnimationState) => {\n\tconst { highBet } = state\n\tconst activePlayer = state.players[state.activePlayerIndex];\n\tconst min = determineMinBet(highBet, activePlayer.chips, activePlayer.bet)\n    const max = activePlayer.chips + activePlayer.bet\n\tconst totalInvestment = activePlayer.chips + activePlayer.bet + activePlayer.stackInvestment; // NOTE: StackInvestment must be incremented at each level of BETTING\n\tconst investmentRequiredToRemain = (highBet / totalInvestment) * 100; \n\tconst descendingSortHand = activePlayer.cards.concat(state.communityCards).sort((a, b) => b.value - a.value)\n\tconst { frequencyHistogram, suitHistogram } =  generateHistogram(descendingSortHand)\n\tconst stakes = classifyStakes(investmentRequiredToRemain);\n\tconst preFlopValues = activePlayer.cards.map(el => el.value);\n\tconst highCard = Math.max(...preFlopValues);\n\tconst lowCard = Math.min(...preFlopValues);\n\tswitch(state.phase) {\n\t\tcase('betting1'): { \n\t\t\tconst suited = Object.entries(suitHistogram).find(keyValuePair => keyValuePair[1] === 2)\t\t\n\t\t\tconst straightGap = (highCard - lowCard <= 4)\n\t\t\tconst { callLimit, raiseChance, raiseRange } = buildPreFlopDeterminant(highCard, lowCard, suited, straightGap)\t\t\n\t\t\tconst willCall = (BET_HIERARCHY[stakes] <= BET_HIERARCHY[callLimit])\n\t\t\tconst callValue = (activePlayer.chips + activePlayer.bet >= highBet) ? highBet : activePlayer.chips + activePlayer.bet;\n\t\t\tif (willCall) {\n\t\t\t\tif (willRaise(raiseChance)) {\n\t\t\t\t\tconst determinedRaiseRange = raiseRange[Math.floor(Math.random() * (raiseRange.length - 0)) + 0];\n\t\t\t\t\tconst wantRaise = (BET_HIERARCHY[stakes] <= BET_HIERARCHY[determinedRaiseRange])\n\t\t\t\t\t\tif (wantRaise) {\n\t\t\t\t\t\t\tlet betValue = Math.floor(decideBetProportion(determinedRaiseRange) * activePlayer.chips)\n\t\t\t\t\t\t\tif (betValue < highBet) {\n\t\t\t\t\t\t\t\tif (highBet < max) {\n\t\t\t\t\t\t\t\t\tbetValue = highBet;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (betValue > max)\n\t\t\t\t\t\t\t\t\tactivePlayer.canRaise = false\n\t\t\t\t\t\t\t\t\tpushAnimationState(state.activePlayerIndex, `${renderActionButtonText(highBet, betValue, activePlayer)} ${betValue}`);\n\t\t\t\t\t\t\t\t\treturn handleBet(state, betValue, min, max);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Do not render the bet value if it's a \"check\"\n\t\t\t\t\t\t\tpushAnimationState(state.activePlayerIndex, `${renderActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\n\t\t\t\t\t\t\treturn handleBet(state, callValue, min, max);\n\t\t\t\t\t\t}\t\n\t\t\t\t} else {\n\t\t\t\t\t\tpushAnimationState(state.activePlayerIndex, `${renderActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\n\t\t\t\t\t\treturn handleBet(state, callValue, min, max);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpushAnimationState(state.activePlayerIndex, `FOLD`);\n\t\t\t\treturn handleFold(state);\n\t\t\t}\n\t\t}\n\t\tcase('betting2'):\n\t\tcase('betting3'):\n\t\tcase('betting4'):\n\t\t\tconst { \n\n\t\t\t\tisPair,\n\t\t\t\tisTwoPair,\n\t\t\t\tisThreeOfAKind,\n\t\t\t\tisFourOfAKind,\n\t\t\t\tisFullHouse,\n\t\t\t\tfrequencyHistogramMetaData, \n\n\t\t\t} = analyzeHistogram(descendingSortHand, frequencyHistogram);\t\t\n\t\t\tconst valueSet = buildValueSet(descendingSortHand);\n\t\t\tconst { \n\n\t\t\t\tisStraight, \n\t\t\t\tisLowStraight, \n\t\t\t\tconcurrentCardValues, \n\t\t\t\tconcurrentCardValuesLow, \n\n\t\t\t} = checkStraight(valueSet);\n\t\t\tconst { \n\t\t\t\t\n\t\t\t\tisFlush, \n\t\t\t\tflushedSuit, \n\n\t\t\t} = checkFlush(suitHistogram);\n\n\t\t\tconst flushCards = (isFlush) && \n\t\t\t\tdescendingSortHand\n\t\t\t\t\t.filter(card => card.suit === flushedSuit);\n\n\t\t\tconst { \n\t\t\t\n\t\t\t\tisStraightFlush, \n\t\t\t\tisLowStraightFlush, \n\t\t\t\tconcurrentSFCardValues, \n\t\t\t\tconcurrentSFCardValuesLow, \n\n\t\t\t} = (isFlush) && checkStraightFlush(flushCards);\n\t\t\tconst isRoyalFlush = (isFlush) && \n\t\t\t\tcheckRoyalFlush(flushCards);\n\t\t\tconst isNoPair = (\n\t\t\t\t(!isRoyalFlush) && \n\t\t\t\t(!isStraightFlush) && \n\t\t\t\t(!isFourOfAKind) && \n\t\t\t\t(!isFullHouse) && \n\t\t\t\t(!isFlush) && \n\t\t\t\t(!isStraight) && \n\t\t\t\t(!isThreeOfAKind) && \n\t\t\t\t(!isTwoPair) && \n\t\t\t\t(!isPair));\n\t\t\tconst handHierarchy = [{\n\t\t\t\tname: 'Royal Flush',\n\t\t\t\tmatch: isRoyalFlush,\n\t\t\t}, {\n\t\t\t\tname: 'Straight Flush',\n\t\t\t\tmatch: isStraightFlush\n\t\t\t}, {\n\t\t\t\tname: 'Four Of A Kind',\n\t\t\t\tmatch: isFourOfAKind,\n\t\t\t}, {\n\t\t\t\tname: 'Full House',\n\t\t\t\tmatch: isFullHouse,\n\t\t\t}, {\n\t\t\t\tname: 'Flush',\n\t\t\t\tmatch: isFlush,\n\t\t\t}, {\n\t\t\t\tname: 'Straight',\n\t\t\t\tmatch: isStraight,\n\t\t\t}, {\n\t\t\t\tname: 'Three Of A Kind',\n\t\t\t\tmatch: isThreeOfAKind,\n\t\t\t}, {\n\t\t\t\tname: 'Two Pair',\n\t\t\t\tmatch: isTwoPair,\n\t\t\t}, {\n\t\t\t\tname: 'Pair',\n\t\t\t\tmatch: isPair,\n\t\t\t}, {\n\t\t\t\tname: 'No Pair',\n\t\t\t\tmatch: isNoPair\n\t\t\t}];\n\t\t\tconst highRank = handHierarchy[handHierarchy.findIndex(el => el.match === true)].name\n\t\t\tconst { callLimit, raiseChance, raiseRange } = buildGeneralizedDeterminant(descendingSortHand, highRank, frequencyHistogramMetaData)\n\t\t\tconst willCall = (BET_HIERARCHY[stakes] <= BET_HIERARCHY[callLimit])\n\t\t\tconst callValue = (activePlayer.chips + activePlayer.bet >= highBet) ? highBet : activePlayer.chips + activePlayer.bet\n\t\t\tif (willCall) {\n\t\t\t\tif (willRaise(raiseChance)) {\n\t\t\t\t\tconst determinedRaiseRange = raiseRange[Math.floor(Math.random() * (raiseRange.length - 0)) + 0];\n\t\t\t\t\tconst wantRaise = (BET_HIERARCHY[stakes] <= BET_HIERARCHY[determinedRaiseRange])\n\t\t\t\t\tif (wantRaise) {\n\t\t\t\t\t\tlet betValue = Math.floor(decideBetProportion(determinedRaiseRange) * activePlayer.chips)\n\t\t\t\t\t\tif (betValue < highBet) {\n\t\t\t\t\t\t\tbetValue = highBet;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\tactivePlayer.canRaise = false\n\t\t\t\t\t\t\tpushAnimationState(state.activePlayerIndex, `${renderActionButtonText(highBet, betValue, activePlayer)} ${betValue}`);\n\t\t\t\t\t\t\treturn handleBet(state, betValue, min, max);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpushAnimationState(state.activePlayerIndex, `${renderActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\n\t\t\t\t\t\treturn handleBet(state, callValue, min, max);\n\t\t\t\t\t}\t\n\t\t\t\t} else {\n\t\t\t\t\t\tpushAnimationState(state.activePlayerIndex, `${renderActionButtonText(highBet, callValue, activePlayer)} ${(callValue > activePlayer.bet) ? (callValue) : \"\"}`);\n\t\t\t\t\t\treturn handleBet(state, callValue, min, max);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpushAnimationState(state.activePlayerIndex, `FOLD`);\n\t\t\t\treturn handleFold(state)\n\t\t\t}\n\t\tdefault: throw Error(\"Handle AI Running during incorrect phase\");\n\t}\n}\n\nconst buildGeneralizedDeterminant = (hand, highRank, frequencyHistogramMetaData) => {\n\tif (highRank === 'Royal Flush') {\n\t\treturn {\n\t\t\tcallLimit: 'beware',\n\t\t\traiseChance: 1,\n\t\t\traiseRange: ['beware']\n\t\t}\n\t} else if (highRank === 'Straight Flush') {\n\t\treturn {\n\t\t\tcallLimit: 'beware',\n\t\t\traiseChance: 1,\n\t\t\traiseRange: ['strong','aggro', 'beware']\n\t\t}\n\t} else if (highRank === 'Four Of A Kind') {\n\t\treturn {\n\t\t\tcallLimit: 'beware',\n\t\t\traiseChance: 1,\n\t\t\traiseRange: ['strong','aggro', 'beware']\n\t\t}\n\t} else if (highRank === 'Full House') {\n\t\treturn {\n\t\t\tcallLimit: 'beware',\n\t\t\traiseChance: 1,\n\t\t\traiseRange: ['hidraw', 'strong', 'aggro', 'beware']\n\t\t}\n\t} else if (highRank === 'Flush') {\n\t\treturn {\n\t\t\tcallLimit: 'beware',\n\t\t\traiseChange: 1,\n\t\t\traiseRange: ['strong', 'aggro', 'beware'],\n\t\t}\n\t} else if (highRank === 'Straight') {\n\t\treturn {\n\t\t\tcallLimit: 'beware',\n\t\t\traiseChange: 1,\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\n\t\t}\n\t} else if (highRank === 'Three Of A Kind') {\n\t\treturn {\n\t\t\tcallLimit: 'beware',\n\t\t\traiseChange: 1,\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\n\t\t}\n\t} else if (highRank === 'Two Pair') {\n\t\treturn {\n\t\t\tcallLimit: 'beware',\n\t\t\traiseChange: 0.7,\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\n\t\t}\n\t} else if (highRank === 'Pair') {\n\t\treturn {\n\t\t\tcallLimit: 'hidraw',\n\t\t\traiseChange: 0.5,\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\n\t\t}\n\t} else if (highRank === 'No Pair') {\n\t\treturn {\n\t\t\tcallLimit: 'meddraw',\n\t\t\traiseChange: 0.2,\n\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw, strong'],\n\t\t}\n\t}\n}\n\nconst buildPreFlopDeterminant = (highCard, lowCard, suited, straightGap) => {\n\tif (highCard === lowCard) {\n\t\tswitch(highCard) {\n\t\t\tcase(highCard > 8): {\n\t\t\t\treturn {\n\t\t\t\t\tcallLimit: 'beware',\n\t\t\t\t\traiseChance: 0.9,\n\t\t\t\t\traiseRange: ['lowdraw', 'meddraw', 'hidraw', 'strong'], // randomly determine bet based on this\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase(highCard > 5): {\n\t\t\t\treturn {\n\t\t\t\t\tcallLimit: 'aggro',\n\t\t\t\t\traiseChance: 0.75, // If Math.random() is < than this, select a random raiseTarget \n\t\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw'],\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase(highCard < 5):\n\t\t\tdefault: {\n\t\t\t\treturn {\n\t\t\t\t\tcallLimit: 'aggro',\n\t\t\t\t\traiseChance: 0.5,\n\t\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw'],\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (highCard > 9 && lowCard > 9) {\n\t\t// Two high cards\n\t\tif (suited) {\n\t\t\treturn {\n\t\t\t\tcallLimit: 'beware',\n\t\t\t\traiseChance: 1,\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcallLimit: 'beware',\n\t\t\t\traiseChance: 0.75,\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\n\t\t\t}\n\t\t}\n\t} else if (highCard > 8 && lowCard > 6) {\n\t\t// One high card\n\t\tif (suited) {\n\t\t\treturn {\n\t\t\t\tcallLimit: 'beware',\n\t\t\t\traiseChance: 0.65,\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcallLimit: 'beware',\n\t\t\t\traiseChance: 0.45,\n\t\t\t\traiseRange: ['insignificant', 'lowdraw', 'meddraw', 'hidraw'],\n\t\t\t}\n\t\t}\n\t} else if (highCard > 8 && lowCard < 6) {\n\t\tif (suited) {\n\t\t\treturn {\n\t\t\t\tcallLimit: 'major',\n\t\t\t\traiseChance: 0.45,\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcallLimit: 'aggro',\n\t\t\t\traiseChance: 0.35,\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\n\t\t\t}\n\t\t}\n\t} else if (highCard > 5 && lowCard > 3) {\n\t\tif (suited) {\n\t\t\treturn{\n\t\t\t\tcallLimit: 'strong',\n\t\t\t\traiseChance: 0.1,\n\t\t\t\traiseRange: ['insignificant', 'lowdraw'],\n\t\t\t}\n\t\t} else if (straightGap) {\n\t\t\treturn {\n\t\t\t\tcallLimit: 'aggro',\n\t\t\t\traiseChance: 0,\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcallLimit: 'strong',\n\t\t\t\traiseChance: 0,\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (suited) {\n\t\t\treturn {\n\t\t\t\tcallLimit: 'strong',\n\t\t\t\traiseChance: 0.1,\n\t\t\t\traiseRange: ['insignificant'],\n\t\t\t}\n\t\t} else if (straightGap) {\n\t\t\treturn {\n\t\t\t\tcallLimit: 'strong',\n\t\t\t\traiseChance: 0,\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcallLimit: 'insignificant',\n\t\t\t\traiseChance: 0,\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst classifyStakes = (percentage) => {\n\tswitch (true) {\n\t\tcase (percentage > 75):\n\t\t\treturn 'beware'\n\t\tcase (percentage > 40):\n\t\t\treturn 'aggro'\n\t\tcase (percentage > 35): \n\t\t\treturn 'major'\n\t\tcase (percentage > 25): \n\t\t\treturn 'strong'\n\t\tcase (percentage > 15):\n\t\t\treturn 'hidraw'\n\t\tcase (percentage > 10): \n\t\t\treturn 'meddraw'\n\t\tcase (percentage > 3):\n\t\t\treturn 'lowdraw'\n\t\tcase (percentage >= 1): \n\t\t\treturn 'insignificant'\n\t\tcase (percentage < 1):\n\t\tdefault:  \n\t\t\treturn 'blind'\n\t}\n}\n\nconst decideBetProportion = (stakes) => {\n\tif (stakes === 'blind') {\n\t\treturn Math.random() * (0.1 - 0) + 0\n\t} else if (stakes === 'insignificant') {\n\t\treturn Math.random() * (0.03 - 0.01) + 0.01\n\t} else if (stakes === 'lowdraw') {\n\t\treturn Math.random() * (0.10 - 0.03) + 0.03\n\t} else if (stakes === 'meddraw') {\n\t\treturn Math.random() * (0.15 - 0.10) + 0.10\n\t} else if (stakes === 'hidraw') {\n\t\treturn Math.random() * (0.25 - 0.15) + 0.15\n\t} else if (stakes === 'strong') {\n\t\treturn Math.random() * (0.35 - 0.25) + 0.25\n\t} else if (stakes === 'major') {\n\t\treturn Math.random() * (0.40 - 0.35) + 0.35\n\t} else if (stakes === 'aggro') {\n\t\treturn Math.random() * (0.75 - 0.40) + 0.40\n\t} else if (stakes === 'beware') {\n\t\treturn Math.random() * (1 - 0.75) + 0.75\n\t}\n}\n\nconst BET_HIERARCHY = {\n\tblind: 0,\n\tinsignificant: 1,\n\tlowdraw: 2,\n\tmeddraw: 3,\n\thidraw: 4,\n\tstrong: 5,\n\tmajor: 6,\n\taggro: 7,\n\tbeware: 8,\n}\n\nconst willRaise = (chance) => {\n\treturn Math.random() < chance\n}\n\nconst generateHistogram = (hand) => {\n\tconst histogram = hand.reduce((acc, cur) => {\n\t\tacc.frequencyHistogram[cur.cardFace] = (acc.frequencyHistogram[cur.cardFace] || 0) + 1;\n\t\tacc.suitHistogram[cur.suit] = (acc.suitHistogram[cur.suit] || 0) + 1;\n\t\treturn acc\n\t}, { frequencyHistogram: {}, suitHistogram: {} })\n\treturn histogram\n}\n\nexport { handleAI }","import \"@babel/polyfill\";\r\n\r\nimport 'core-js/es6/map';\r\nimport 'core-js/es6/set';\r\nimport 'raf/polyfill';\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport WinScreen from './WinScreen';\r\nimport LoseScreen from './loseScreen';\r\nimport Spinner from './Spinner';\r\n\r\nimport Player from \"../components/players/Player\";\r\nimport ShowdownPlayer from \"../components/players/ShowdownPlayer\";\r\nimport Card from \"../components/cards/Card\";\r\nimport logo from '../assets/logo.png';\r\n\r\nimport { \r\n  generateDeckOfCards, \r\n  shuffle, \r\n  dealPrivateCards,\r\n} from '../utils/cards.js';\r\n\r\nimport { \r\n  generateTable, \r\n  beginNextRound,\r\n  checkWin\r\n} from '../utils/players.js';\r\n\r\nimport { \r\n  determineBlindIndices, \r\n  anteUpBlinds, \r\n  determineMinBet,\r\n  handleBet,\r\n  handleFold, \r\n} from '../utils/bet.js';\r\n\r\nimport {\r\n  handleAI as handleAIUtil\r\n} from '../utils/ai.js';\r\n\r\nimport {\r\n  renderShowdownMessages,\r\n  renderActionButtonText,\r\n  renderNetPlayerEarnings,\r\n  renderActionMenu\r\n} from '../utils/ui.js';\r\n\r\nimport { cloneDeep } from 'lodash';\r\n\r\nclass PlayMode extends Component {\r\n  state = {\r\n    loading: true,\r\n    winner: null,\r\n    loser :null,\r\n    players: null,\r\n    numPlayersActive: null,\r\n    numPlayersFolded: null,\r\n    numPlayersAllIn: null,\r\n    activePlayerIndex: null,\r\n    dealerIndex: null,\r\n    blindIndex: null,\r\n    deck: null,\r\n    communityCards: [],\r\n    pot: null,\r\n    highBet: null,\r\n    betInputValue: null,\r\n    sidePots: [],\r\n    minBet: 20,\r\n    phase: 'loading',\r\n    playerHierarchy: [],\r\n    showDownMessages: [],\r\n    playActionMessages: [],\r\n    playerAnimationSwitchboard: {\r\n      0: {isAnimating: false, content: null},\r\n      1: {isAnimating: false, content: null},\r\n      2: {isAnimating: false, content: null},\r\n      3: {isAnimating: false, content: null},\r\n      4: {isAnimating: false, content: null},\r\n      5: {isAnimating: false, content: null}\r\n    }\r\n  }\r\n\r\n  cardAnimationDelay = 0;\r\n  \r\n  loadTable = () => {\r\n\r\n  }\r\n\r\n  handleAvailable = (value) =>{\r\n    this.setState({available: value})\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const players = await generateTable();\r\n    const dealerIndex = Math.floor(Math.random() * Math.floor(players.length));\r\n    const blindIndicies = determineBlindIndices(dealerIndex, players.length);\r\n    const playersBoughtIn = anteUpBlinds(players, blindIndicies, this.state.minBet);\r\n    \r\n    const imageLoaderRequest = new XMLHttpRequest();\r\n\r\nimageLoaderRequest.addEventListener(\"load\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n    console.log(\"Image Loaded!\");\r\n    this.setState({\r\n      loading: false,\r\n    })\r\n});\r\n\r\nimageLoaderRequest.addEventListener(\"error\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n});\r\n\r\n\r\nimageLoaderRequest.addEventListener(\"loadstart\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n});\r\n\r\nimageLoaderRequest.addEventListener(\"loadend\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n});\r\n\r\nimageLoaderRequest.addEventListener(\"abort\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n});\r\n\r\nimageLoaderRequest.addEventListener(\"progress\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n});\r\n\r\nimageLoaderRequest.open(\"GET\", \"./assets/table-nobg-svg-01.png\");\r\nimageLoaderRequest.send();\r\n\r\n    this.setState(prevState => ({\r\n      // loading: false,\r\n      players: playersBoughtIn,\r\n      numPlayersActive: players.length,\r\n      numPlayersFolded: 0,\r\n      numPlayersAllIn: 0,\r\n      activePlayerIndex: dealerIndex,\r\n      dealerIndex,\r\n      blindIndex: {\r\n        big: blindIndicies.bigBlindIndex,\r\n        small: blindIndicies.smallBlindIndex,\r\n      },\r\n      deck: shuffle(generateDeckOfCards()),\r\n      pot: 0,\r\n      highBet: prevState.minBet,\r\n      betInputValue: prevState.minBet,\r\n      phase: 'initialDeal',\r\n    }))\r\n    this.runGameLoop();\r\n  }\r\n\r\n  handleBetInputChange = (val, min, max) => {\r\n    if (val === '') val = min\r\n    if (val > max) val = max\r\n      this.setState({\r\n        betInputValue: parseInt(val, 10),\r\n      });\r\n  }\r\n  \r\n  changeSliderInput = (val) => {\r\n    this.setState({\r\n      betInputValue: val[0]\r\n    })\r\n  }\r\n\r\n  pushAnimationState = (index, content) => {\r\n    const newAnimationSwitchboard = Object.assign(\r\n      {}, \r\n      this.state.playerAnimationSwitchboard,\r\n      {[index]: {isAnimating: true, content}}     \r\n    )\r\n    this.setState({playerAnimationSwitchboard: newAnimationSwitchboard});\r\n  }\r\n\r\n  popAnimationState = (index) => {\r\n    const persistContent = this.state.playerAnimationSwitchboard[index].content;\r\n    const newAnimationSwitchboard = Object.assign(\r\n      {}, \r\n      this.state.playerAnimationSwitchboard,\r\n      {[index]: {isAnimating: false, content: persistContent}}     \r\n    )\r\n    this.setState({playerAnimationSwitchboard: newAnimationSwitchboard});\r\n  }\r\n\r\n  handleBetInputSubmit = (bet, min, max) => {\r\n    const {playerAnimationSwitchboard, ...appState} = this.state;\r\n    const { activePlayerIndex } = appState;\r\n    this.pushAnimationState(activePlayerIndex, `${renderActionButtonText(this.state.highBet, this.state.betInputValue, this.state.players[this.state.activePlayerIndex])} ${(bet > this.state.players[this.state.activePlayerIndex].bet) ? (bet) : \"\"}`);;\r\n    const newState = handleBet(cloneDeep(appState), parseInt(bet, 10), parseInt(min, 10), parseInt(max, 10));\r\n      this.setState(newState, () => {\r\n        if((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n          setTimeout(() => {\r\n          \r\n            this.handleAI()\r\n          }, 1200)\r\n        }\r\n      });\r\n  }\r\n\r\n  handleFold = () => {\r\n    const {playerAnimationSwitchboard, ...appState} = this.state\r\n    const newState = handleFold(cloneDeep(appState));\r\n      this.setState(newState, () => {\r\n        if((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n          setTimeout(() => {\r\n          \r\n            this.handleAI()\r\n          }, 1200)\r\n        }\r\n      })\r\n  }\r\n\r\n  handleAI = () => {\r\n    const {playerAnimationSwitchboard, ...appState} = this.state;\r\n    const newState = handleAIUtil(cloneDeep(appState), this.pushAnimationState)\r\n\r\n      this.setState({\r\n            ...newState,\r\n            betInputValue: newState.minBet\r\n      }, () => {\r\n        if((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n          setTimeout(() => {\r\n          \r\n            this.handleAI()\r\n          }, 1200)\r\n        }\r\n      })\r\n  }\r\n\r\n  renderBoard = () => {\r\n    const { \r\n      players,\r\n      activePlayerIndex,\r\n      dealerIndex,\r\n      clearCards,\r\n      phase,\r\n      playerAnimationSwitchboard\r\n    } = this.state;\r\n    // Reverse Players Array for the sake of taking turns counter-clockwise.\r\n    const reversedPlayers = players.reduce((result, player, index) => {\r\n      \r\n      const isActive = (index === activePlayerIndex);\r\n      const hasDealerChip = (index === dealerIndex);\r\n\r\n\r\n      result.unshift(\r\n          <Player\r\n            key={index}\r\n            arrayIndex={index}\r\n            isActive={isActive}\r\n            hasDealerChip={hasDealerChip}\r\n            player={player}\r\n            clearCards={clearCards}\r\n            phase={phase}\r\n            playerAnimationSwitchboard={playerAnimationSwitchboard}      \r\n            endTransition={this.popAnimationState}\r\n          />\r\n      )\r\n      return result\r\n    }, []);\r\n    return reversedPlayers.map(component => component);\r\n  }\r\n\r\n  renderCommunityCards = (purgeAnimation) => {\r\n    return this.state.communityCards.map((card, index) => {\r\n      let cardData = {...card};\r\n      if (purgeAnimation) {\r\n        cardData.animationDelay = 0;\r\n      }\r\n      return(\r\n        <Card key={index} cardData={cardData}/>\r\n      );\r\n    });\r\n  }\r\n\r\n  runGameLoop = () => {\r\n    const newState = dealPrivateCards(cloneDeep(this.state))\r\n    this.setState(newState, () => {\r\n      if((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n          this.handleAI()\r\n        }, 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  renderRankTie = (rankSnapshot) => {\r\n    return rankSnapshot.map(player => {\r\n      return this.renderRankWinner(player);\r\n    })\r\n  }\r\n\r\n  renderRankWinner = (player) => {\r\n    const { name, bestHand, handRank } = player;\r\n    const playerStateData = this.state.players.find(statePlayer => statePlayer.name === name);\r\n    return (\r\n      <div className=\"showdown-player--entity\" key={name}>\r\n        <ShowdownPlayer\r\n          name={name}\r\n          avatarURL={playerStateData.avatarURL}\r\n          cards={playerStateData.cards}\r\n          roundEndChips={playerStateData.roundEndChips}\r\n          roundStartChips={playerStateData.roundStartChips}\r\n        />\r\n        <div className=\"showdown-player--besthand--container\">\r\n          <h5 className=\"showdown-player--besthand--heading\">\r\n            Best Hand\r\n          </h5>\r\n          <div className='showdown-player--besthand--cards' style={{alignItems: 'center'}}>\r\n            {\r\n              bestHand.map((card, index) => {\r\n                // Reset Animation Delay\r\n                const cardData = {...card, animationDelay: 0}\r\n                return <Card key={index} cardData={cardData}/>\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"showdown--handrank\">\r\n          {handRank}\r\n        </div>\r\n        {renderNetPlayerEarnings(playerStateData.roundEndChips, playerStateData.roundStartChips)}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderBestHands = () => {\r\n    const { playerHierarchy } = this.state;\r\n\r\n    return playerHierarchy.map(rankSnapshot => {\r\n      const tie = Array.isArray(rankSnapshot);\r\n      return tie ? this.renderRankTie(rankSnapshot) : this.renderRankWinner(rankSnapshot);\r\n    })\r\n  }\r\n\r\n  handleNextRound = () => {\r\n    this.setState({clearCards: true})\r\n    const newState = beginNextRound(cloneDeep(this.state))\r\n    // Check win condition\r\n    if(checkWin(newState.players)==\"win\") {\r\n        this.setState({ winner: true })\r\n        return;\r\n    }\r\n    if(checkWin(newState.players)==\"lose\") {\r\n        this.setState({ loser: true })\r\n        return;\r\n    }\r\n      this.setState(newState, () => {\r\n        if((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n          setTimeout(() => this.handleAI(), 1200)\r\n        }\r\n      })\r\n  }\r\n\r\n  renderActionButtons = () => {\r\n    const { highBet, players, activePlayerIndex, phase, betInputValue } = this.state\r\n    const min = determineMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet)\r\n    const max = players[activePlayerIndex].chips + players[activePlayerIndex].bet\r\n    return ((players[activePlayerIndex].robot) || (phase === 'showdown')) ? null : (\r\n      <React.Fragment>\r\n        <button className='action-button' onClick={() => this.handleBetInputSubmit(betInputValue, min, max)}>\r\n          {renderActionButtonText(highBet, betInputValue, players[activePlayerIndex])}\r\n        </button>\r\n        <button className='fold-button' onClick={() => this.handleFold()}>\r\n          Fold\r\n        </button>\r\n      </React.Fragment>\r\n      )\r\n  }\r\n\r\n  renderShowdown = () => {\r\n    return(\r\n      <div className='showdown-container--wrapper'>\r\n        <h5 className=\"showdown-container--title\">\r\n          Round Complete!\r\n        </h5>\r\n        <div className=\"showdown-container--messages\">\r\n          { renderShowdownMessages(this.state.showDownMessages)}\r\n        </div>\r\n        <h5 className=\"showdown-container--community-card-label\">\r\n          Community Cards\r\n        </h5>\r\n        <div className='showdown-container--community-cards'>\r\n          { this.renderCommunityCards(true) }\r\n        </div>\r\n        <button className=\"showdown--nextRound--button\" onClick={() => this.handleNextRound()}> Next Round </button>\r\n          { this.renderBestHands() }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderGame = () => {\r\n    const { highBet, players, activePlayerIndex, phase } = this.state;\r\n    return (\r\n      <div className='poker-app--background'>\r\n        <div className=\"poker-table--container\">\r\n          <img className=\"poker-table--table-image\" src={\"./assets/table-nobg-svg-01.png\"} alt=\"Poker Table\" />\r\n          { this.renderBoard() }\r\n          <div className='community-card-container' >\r\n            { this.renderCommunityCards() }\r\n          </div>\r\n          <div className='pot-container'>\r\n            <img style={{height: 55, width: 55}} src={'./assets/pot.svg'} alt=\"Pot Value\"/>\r\n            <h4> {`${this.state.pot}`} </h4>\r\n          </div>\r\n        </div>\r\n        { (this.state.phase === 'showdown') && this.renderShowdown() } \r\n        <div className='game-action-bar' >\r\n          <div className = \"logo\">\r\n            <img src = {logo} alt = \"logo\" width = \"30px\" />\r\n          </div>\r\n          <div className='action-buttons'>\r\n              { this.renderActionButtons() }\r\n          </div>\r\n          <div className='slider-boi'>\r\n            { (!this.state.loading)  && renderActionMenu(highBet, players, activePlayerIndex, phase, this.handleBetInputChange)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className='poker-table--wrapper'> \r\n          { \r\n            (this.state.loading) ? <Spinner />:\r\n            (this.state.winner) ? <WinScreen /> :\r\n            (this.state.loser) ? <LoseScreen /> : \r\n            this.renderGame()\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayMode;\r\n","import React, {useEffect} from 'react';\r\nimport Axios from 'axios';\r\n\r\nfunction WinScreen(){\r\n\r\n    const handleReplay = () =>{\r\n        window.location.reload();\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className = \"x-winCup\">\r\n                <img src = \"/assets/winCup.png\" alt = \"winCup\" style = {{width: \"300px\"}} />\r\n            </div>\r\n            <div className = \"x-font2\">\r\n                Congratulations!\r\n            </div>\r\n            <div className = \"x-font1\">\r\n                You are Winner in this game!\r\n            </div>\r\n            <div className = \"x-replay\">\r\n                <button className = \"x-connect-button\" onClick = {handleReplay}>Replay</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WinScreen;","import \"@babel/polyfill\";\r\n\r\nimport 'core-js/es6/map';\r\nimport 'core-js/es6/set';\r\nimport 'raf/polyfill';\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport WinScreen from './prewin';\r\nimport LoseScreen from './loseScreen';\r\nimport Spinner from './Spinner';\r\n\r\nimport Player from \"../components/players/Player\";\r\nimport ShowdownPlayer from \"../components/players/ShowdownPlayer\";\r\nimport Card from \"../components/cards/Card\";\r\nimport logo from '../assets/logo.png';\r\n\r\nimport { \r\n  generateDeckOfCards, \r\n  shuffle, \r\n  dealPrivateCards,\r\n} from '../utils/cards.js';\r\n\r\nimport { \r\n  generateTable, \r\n  beginNextRound,\r\n  checkWin\r\n} from '../utils/players.js';\r\n\r\nimport { \r\n  determineBlindIndices, \r\n  anteUpBlinds, \r\n  determineMinBet,\r\n  handleBet,\r\n  handleFold, \r\n} from '../utils/bet.js';\r\n\r\nimport {\r\n  handleAI as handleAIUtil\r\n} from '../utils/ai.js';\r\n\r\nimport {\r\n  renderShowdownMessages,\r\n  renderActionButtonText,\r\n  renderNetPlayerEarnings,\r\n  renderActionMenu\r\n} from '../utils/ui.js';\r\n\r\nimport { cloneDeep } from 'lodash';\r\n\r\nclass PlayMode extends Component {\r\n  state = {\r\n    loading: true,\r\n    winner: null,\r\n    loser :null,\r\n    players: null,\r\n    numPlayersActive: null,\r\n    numPlayersFolded: null,\r\n    numPlayersAllIn: null,\r\n    activePlayerIndex: null,\r\n    dealerIndex: null,\r\n    blindIndex: null,\r\n    deck: null,\r\n    communityCards: [],\r\n    pot: null,\r\n    highBet: null,\r\n    betInputValue: null,\r\n    sidePots: [],\r\n    minBet: 20,\r\n    phase: 'loading',\r\n    playerHierarchy: [],\r\n    showDownMessages: [],\r\n    playActionMessages: [],\r\n    playerAnimationSwitchboard: {\r\n      0: {isAnimating: false, content: null},\r\n      1: {isAnimating: false, content: null},\r\n      2: {isAnimating: false, content: null},\r\n      3: {isAnimating: false, content: null},\r\n      4: {isAnimating: false, content: null},\r\n      5: {isAnimating: false, content: null}\r\n    }\r\n  }\r\n\r\n  cardAnimationDelay = 0;\r\n  \r\n  loadTable = () => {\r\n\r\n  }\r\n\r\n  handleAvailable = (value) =>{\r\n    this.setState({available: value})\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const players = await generateTable();\r\n    const dealerIndex = Math.floor(Math.random() * Math.floor(players.length));\r\n    const blindIndicies = determineBlindIndices(dealerIndex, players.length);\r\n    const playersBoughtIn = anteUpBlinds(players, blindIndicies, this.state.minBet);\r\n    \r\n    const imageLoaderRequest = new XMLHttpRequest();\r\n\r\nimageLoaderRequest.addEventListener(\"load\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n    console.log(\"Image Loaded!\");\r\n    this.setState({\r\n      loading: false,\r\n    })\r\n});\r\n\r\nimageLoaderRequest.addEventListener(\"error\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n});\r\n\r\n\r\nimageLoaderRequest.addEventListener(\"loadstart\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n});\r\n\r\nimageLoaderRequest.addEventListener(\"loadend\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n});\r\n\r\nimageLoaderRequest.addEventListener(\"abort\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n});\r\n\r\nimageLoaderRequest.addEventListener(\"progress\", e => {\r\n    console.log(`${e.type}`);\r\n    console.log(e);\r\n});\r\n\r\nimageLoaderRequest.open(\"GET\", \"./assets/table-nobg-svg-01.png\");\r\nimageLoaderRequest.send();\r\n\r\n    this.setState(prevState => ({\r\n      // loading: false,\r\n      players: playersBoughtIn,\r\n      numPlayersActive: players.length,\r\n      numPlayersFolded: 0,\r\n      numPlayersAllIn: 0,\r\n      activePlayerIndex: dealerIndex,\r\n      dealerIndex,\r\n      blindIndex: {\r\n        big: blindIndicies.bigBlindIndex,\r\n        small: blindIndicies.smallBlindIndex,\r\n      },\r\n      deck: shuffle(generateDeckOfCards()),\r\n      pot: 0,\r\n      highBet: prevState.minBet,\r\n      betInputValue: prevState.minBet,\r\n      phase: 'initialDeal',\r\n    }))\r\n    this.runGameLoop();\r\n  }\r\n\r\n  handleBetInputChange = (val, min, max) => {\r\n    if (val === '') val = min\r\n    if (val > max) val = max\r\n      this.setState({\r\n        betInputValue: parseInt(val, 10),\r\n      });\r\n  }\r\n  \r\n  changeSliderInput = (val) => {\r\n    this.setState({\r\n      betInputValue: val[0]\r\n    })\r\n  }\r\n\r\n  pushAnimationState = (index, content) => {\r\n    const newAnimationSwitchboard = Object.assign(\r\n      {}, \r\n      this.state.playerAnimationSwitchboard,\r\n      {[index]: {isAnimating: true, content}}     \r\n    )\r\n    this.setState({playerAnimationSwitchboard: newAnimationSwitchboard});\r\n  }\r\n\r\n  popAnimationState = (index) => {\r\n    const persistContent = this.state.playerAnimationSwitchboard[index].content;\r\n    const newAnimationSwitchboard = Object.assign(\r\n      {}, \r\n      this.state.playerAnimationSwitchboard,\r\n      {[index]: {isAnimating: false, content: persistContent}}     \r\n    )\r\n    this.setState({playerAnimationSwitchboard: newAnimationSwitchboard});\r\n  }\r\n\r\n  handleBetInputSubmit = (bet, min, max) => {\r\n    const {playerAnimationSwitchboard, ...appState} = this.state;\r\n    const { activePlayerIndex } = appState;\r\n    this.pushAnimationState(activePlayerIndex, `${renderActionButtonText(this.state.highBet, this.state.betInputValue, this.state.players[this.state.activePlayerIndex])} ${(bet > this.state.players[this.state.activePlayerIndex].bet) ? (bet) : \"\"}`);;\r\n    const newState = handleBet(cloneDeep(appState), parseInt(bet, 10), parseInt(min, 10), parseInt(max, 10));\r\n      this.setState(newState, () => {\r\n        if((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n          setTimeout(() => {\r\n          \r\n            this.handleAI()\r\n          }, 1200)\r\n        }\r\n      });\r\n  }\r\n\r\n  handleFold = () => {\r\n    const {playerAnimationSwitchboard, ...appState} = this.state\r\n    const newState = handleFold(cloneDeep(appState));\r\n      this.setState(newState, () => {\r\n        if((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n          setTimeout(() => {\r\n          \r\n            this.handleAI()\r\n          }, 1200)\r\n        }\r\n      })\r\n  }\r\n\r\n  handleAI = () => {\r\n    const {playerAnimationSwitchboard, ...appState} = this.state;\r\n    const newState = handleAIUtil(cloneDeep(appState), this.pushAnimationState)\r\n\r\n      this.setState({\r\n            ...newState,\r\n            betInputValue: newState.minBet\r\n      }, () => {\r\n        if((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n          setTimeout(() => {\r\n          \r\n            this.handleAI()\r\n          }, 1200)\r\n        }\r\n      })\r\n  }\r\n\r\n  renderBoard = () => {\r\n    const { \r\n      players,\r\n      activePlayerIndex,\r\n      dealerIndex,\r\n      clearCards,\r\n      phase,\r\n      playerAnimationSwitchboard\r\n    } = this.state;\r\n    // Reverse Players Array for the sake of taking turns counter-clockwise.\r\n    const reversedPlayers = players.reduce((result, player, index) => {\r\n      \r\n      const isActive = (index === activePlayerIndex);\r\n      const hasDealerChip = (index === dealerIndex);\r\n\r\n\r\n      result.unshift(\r\n          <Player\r\n            key={index}\r\n            arrayIndex={index}\r\n            isActive={isActive}\r\n            hasDealerChip={hasDealerChip}\r\n            player={player}\r\n            clearCards={clearCards}\r\n            phase={phase}\r\n            playerAnimationSwitchboard={playerAnimationSwitchboard}      \r\n            endTransition={this.popAnimationState}\r\n          />\r\n      )\r\n      return result\r\n    }, []);\r\n    return reversedPlayers.map(component => component);\r\n  }\r\n\r\n  renderCommunityCards = (purgeAnimation) => {\r\n    return this.state.communityCards.map((card, index) => {\r\n      let cardData = {...card};\r\n      if (purgeAnimation) {\r\n        cardData.animationDelay = 0;\r\n      }\r\n      return(\r\n        <Card key={index} cardData={cardData}/>\r\n      );\r\n    });\r\n  }\r\n\r\n  runGameLoop = () => {\r\n    const newState = dealPrivateCards(cloneDeep(this.state))\r\n    this.setState(newState, () => {\r\n      if((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n        setTimeout(() => {\r\n          this.handleAI()\r\n        }, 1200)\r\n      }\r\n    })\r\n  }\r\n\r\n  renderRankTie = (rankSnapshot) => {\r\n    return rankSnapshot.map(player => {\r\n      return this.renderRankWinner(player);\r\n    })\r\n  }\r\n\r\n  renderRankWinner = (player) => {\r\n    const { name, bestHand, handRank } = player;\r\n    const playerStateData = this.state.players.find(statePlayer => statePlayer.name === name);\r\n    return (\r\n      <div className=\"showdown-player--entity\" key={name}>\r\n        <ShowdownPlayer\r\n          name={name}\r\n          avatarURL={playerStateData.avatarURL}\r\n          cards={playerStateData.cards}\r\n          roundEndChips={playerStateData.roundEndChips}\r\n          roundStartChips={playerStateData.roundStartChips}\r\n        />\r\n        <div className=\"showdown-player--besthand--container\">\r\n          <h5 className=\"showdown-player--besthand--heading\">\r\n            Best Hand\r\n          </h5>\r\n          <div className='showdown-player--besthand--cards' style={{alignItems: 'center'}}>\r\n            {\r\n              bestHand.map((card, index) => {\r\n                // Reset Animation Delay\r\n                const cardData = {...card, animationDelay: 0}\r\n                return <Card key={index} cardData={cardData}/>\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"showdown--handrank\">\r\n          {handRank}\r\n        </div>\r\n        {renderNetPlayerEarnings(playerStateData.roundEndChips, playerStateData.roundStartChips)}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderBestHands = () => {\r\n    const { playerHierarchy } = this.state;\r\n\r\n    return playerHierarchy.map(rankSnapshot => {\r\n      const tie = Array.isArray(rankSnapshot);\r\n      return tie ? this.renderRankTie(rankSnapshot) : this.renderRankWinner(rankSnapshot);\r\n    })\r\n  }\r\n\r\n  handleNextRound = () => {\r\n    this.setState({clearCards: true})\r\n    const newState = beginNextRound(cloneDeep(this.state))\r\n    // Check win condition\r\n    if(checkWin(newState.players)==\"win\") {\r\n        this.setState({ winner: true })\r\n        return;\r\n    }\r\n    if(checkWin(newState.players)==\"lose\") {\r\n        this.setState({ loser: true })\r\n        return;\r\n    }\r\n      this.setState(newState, () => {\r\n        if((this.state.players[this.state.activePlayerIndex].robot) && (this.state.phase !== 'showdown')) {\r\n          setTimeout(() => this.handleAI(), 1200)\r\n        }\r\n      })\r\n  }\r\n\r\n  renderActionButtons = () => {\r\n    const { highBet, players, activePlayerIndex, phase, betInputValue } = this.state\r\n    const min = determineMinBet(highBet, players[activePlayerIndex].chips, players[activePlayerIndex].bet)\r\n    const max = players[activePlayerIndex].chips + players[activePlayerIndex].bet\r\n    return ((players[activePlayerIndex].robot) || (phase === 'showdown')) ? null : (\r\n      <React.Fragment>\r\n        <button className='action-button' onClick={() => this.handleBetInputSubmit(betInputValue, min, max)}>\r\n          {renderActionButtonText(highBet, betInputValue, players[activePlayerIndex])}\r\n        </button>\r\n        <button className='fold-button' onClick={() => this.handleFold()}>\r\n          Fold\r\n        </button>\r\n      </React.Fragment>\r\n      )\r\n  }\r\n\r\n  renderShowdown = () => {\r\n    return(\r\n      <div className='showdown-container--wrapper'>\r\n        <h5 className=\"showdown-container--title\">\r\n          Round Complete!\r\n        </h5>\r\n        <div className=\"showdown-container--messages\">\r\n          { renderShowdownMessages(this.state.showDownMessages)}\r\n        </div>\r\n        <h5 className=\"showdown-container--community-card-label\">\r\n          Community Cards\r\n        </h5>\r\n        <div className='showdown-container--community-cards'>\r\n          { this.renderCommunityCards(true) }\r\n        </div>\r\n        <button className=\"showdown--nextRound--button\" onClick={() => this.handleNextRound()}> Next Round </button>\r\n          { this.renderBestHands() }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderGame = () => {\r\n    const { highBet, players, activePlayerIndex, phase } = this.state;\r\n    return (\r\n      <div className='poker-app--background'>\r\n        <div className=\"poker-table--container\">\r\n          <img className=\"poker-table--table-image\" src={\"./assets/table-nobg-svg-01.png\"} alt=\"Poker Table\" />\r\n          { this.renderBoard() }\r\n          <div className='community-card-container' >\r\n            { this.renderCommunityCards() }\r\n          </div>\r\n          <div className='pot-container'>\r\n            <img style={{height: 55, width: 55}} src={'./assets/pot.svg'} alt=\"Pot Value\"/>\r\n            <h4> {`${this.state.pot}`} </h4>\r\n          </div>\r\n        </div>\r\n        { (this.state.phase === 'showdown') && this.renderShowdown() } \r\n        <div className='game-action-bar' >\r\n          <div className = \"logo\">\r\n            <img src = {logo} alt = \"logo\" width = \"30px\" />\r\n          </div>\r\n          <div className='action-buttons'>\r\n              { this.renderActionButtons() }\r\n          </div>\r\n          <div className='slider-boi'>\r\n            { (!this.state.loading)  && renderActionMenu(highBet, players, activePlayerIndex, phase, this.handleBetInputChange)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className='poker-table--wrapper'> \r\n          { \r\n            (this.state.loading) ? <Spinner />:\r\n            (this.state.winner) ? <WinScreen /> :\r\n            (this.state.loser) ? <LoseScreen /> : \r\n            this.renderGame()\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayMode;\r\n","import React, { useState } from 'react';\r\nimport Home from './home';\r\nimport PlayMode from './playmode';\r\nimport PreplayMode from './preplaymode';\r\n\r\nfunction Index(){\r\n    const [available, setAvailable] = useState(false);\r\n    const [preAvailable, setPreAvailable] = useState(false);\r\n    return(\r\n    <div className=\"App\">\r\n        <div className='poker-table--wrapper'> \r\n          { \r\n            (!available&&!preAvailable) ? <Home setAvailable = {setAvailable} setPreAvailable = {setPreAvailable}/> : \r\n            (available) ?\r\n            <PlayMode />:\r\n            (preAvailable)?\r\n            <PreplayMode />:\r\n            null\r\n          }\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Index;","import React from 'react';\r\nimport { BrowserRouter ,HashRouter, Switch, Route } from 'react-router-dom'\r\nimport Index from '../pages/index';\r\n\r\n\r\nconst routes = (props) =>{\r\n\r\n  return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={(Index)} />\r\n                <Route path=\"/play\" component={(Index)} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n  }\r\n\r\nexport default routes;\r\n","import React, {useState, useEffect} from 'react';\nimport Route from './router';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport './App.css';\nimport './Poker.css';\n\nfunction App(){\n\n  const [flag, setFlag] = useState(true);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", alertUser);\n    return () => {\n      window.removeEventListener(\"beforeunload\", alertUser);\n    };\n  }, []);\n  const alertUser = (e) => {\n    e.preventDefault();\n    e.returnValue = \"\";\n  };\n\n  useEffect(()=>{\n    async function func(){\n      if(flag){\n        setFlag(false)\n        if (window.ethereum) {\n          window.ethereum.on('chainChanged', (chainId) => {\n            window.location.reload();\n          });\n          const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n          console.log(chainId);\n          if(chainId===\"0x89\")\n          setOpen(false);\n          else\n          setOpen(true);\n        }\n      }\n    }\n    func();\n  }\n  )\n\n  const Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\n  return(\n      <React.Fragment>\n        <Dialog\n            open={open}\n            TransitionComponent={Transition}\n            keepMounted\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n          >\n          <DialogTitle id=\"alert-dialog-slide-title\">{\"chain error\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              Please set your chain to Matic chain\n            </DialogContentText>\n          </DialogContent>\n        </Dialog>\n        <Route />\n      </React.Fragment>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/logo.401e1e7d.png\";"],"sourceRoot":""}